drop schema proyecto;

create database PROYECTO;

use PROYECTO;

-- Creacion tabla HUELLITAS_ESTADO_TB
CREATE TABLE HUELLITAS_ESTADO_TB (
    ID_ESTADO_PK INT NOT NULL AUTO_INCREMENT,
    ESTADO_DESCRIPCION VARCHAR(100) NOT NULL,
    CONSTRAINT HUELLITAS_ESTADO_PK PRIMARY KEY (ID_ESTADO_PK)
);
/
-- Creacion tabla HUELLITAS_NUEVO_TB
CREATE TABLE HUELLITAS_NUEVO_TB (
    ID_NUEVO_PK INT NOT NULL AUTO_INCREMENT,
    NUEVO_DESCRIPCION VARCHAR(100),
    CONSTRAINT HUELLITAS_NUEVO_PK PRIMARY KEY (ID_NUEVO_PK)
);
/

-- Creacion tabla HUELLITAS_DIRECCION_PROVINCIA_TB
CREATE TABLE HUELLITAS_DIRECCION_PROVINCIA_TB (
    ID_DIRECCION_PROVINCIA_PK INT NOT NULL AUTO_INCREMENT,
    ID_ESTADO_FK INT NOT NULL,
    NOMBRE_PROVINCIA VARCHAR(100) NOT NULL,
    CONSTRAINT HUELLITAS_DIRECCION_PROVINCIA_PK PRIMARY KEY (ID_DIRECCION_PROVINCIA_PK),
    CONSTRAINT HUELLITAS_DIRECCION_PROVINCIA_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES HUELLITAS_ESTADO_TB(ID_ESTADO_PK)
);
/
-- Creacion tabla HUELLITAS_DIRECCION_CANTON_TB
CREATE TABLE HUELLITAS_DIRECCION_CANTON_TB (
    ID_DIRECCION_CANTON_PK INT NOT NULL AUTO_INCREMENT,
    ID_ESTADO_FK INT NOT NULL,
    NOMBRE_CANTON VARCHAR(100) NOT NULL,
    CONSTRAINT HUELLITAS_DIRECCION_CANTON_PK PRIMARY KEY (ID_DIRECCION_CANTON_PK),
    CONSTRAINT HUELLITAS_DIRECCION_CANTON_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES HUELLITAS_ESTADO_TB(ID_ESTADO_PK)
);
/
-- Creacion tabla HUELLITAS_DIRECCION_DISTRITO_TB
CREATE TABLE HUELLITAS_DIRECCION_DISTRITO_TB (
    ID_DIRECCION_DISTRITO_PK INT NOT NULL AUTO_INCREMENT,
    ID_ESTADO_FK INT NOT NULL,
    NOMBRE_DISTRITO VARCHAR(100) NOT NULL,
    CONSTRAINT HUELLITAS_DIRECCION_DISTRITO_PK PRIMARY KEY (ID_DIRECCION_DISTRITO_PK),
    CONSTRAINT HUELLITAS_DIRECCION_DISTRITO_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES HUELLITAS_ESTADO_TB(ID_ESTADO_PK)
);
/
-- Creacion tabla HUELLITAS_DIRECCION_TB
CREATE TABLE HUELLITAS_DIRECCION_TB (
    ID_DIRECCION_PK INT NOT NULL AUTO_INCREMENT,
    ID_ESTADO_FK INT NOT NULL,
    ID_DIRECCION_PROVINCIA_FK INT NOT NULL,
    ID_DIRECCION_CANTON_FK INT NOT NULL,
    ID_DIRECCION_DISTRITO_FK INT NOT NULL,
    DIRECCION_SENNAS VARCHAR(200),
    CONSTRAINT HUELLITAS_DIRECCION_PK PRIMARY KEY (ID_DIRECCION_PK),
    CONSTRAINT HUELLITAS_DIRECCION_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES HUELLITAS_ESTADO_TB(ID_ESTADO_PK),
    CONSTRAINT HUELLITAS_DIRECCION_PROVINCIA_FK FOREIGN KEY (ID_DIRECCION_PROVINCIA_FK) REFERENCES HUELLITAS_DIRECCION_PROVINCIA_TB(ID_DIRECCION_PROVINCIA_PK),
    CONSTRAINT HUELLITAS_DIRECCION_CANTON_FK FOREIGN KEY (ID_DIRECCION_CANTON_FK) REFERENCES HUELLITAS_DIRECCION_CANTON_TB(ID_DIRECCION_CANTON_PK),
    CONSTRAINT HUELLITAS_DIRECCION_DISTRITO_FK FOREIGN KEY (ID_DIRECCION_DISTRITO_FK) REFERENCES HUELLITAS_DIRECCION_DISTRITO_TB(ID_DIRECCION_DISTRITO_PK)
);
/
-- Creacion tabla HUELLITAS_TELEFONO_CONTACTO_TB
CREATE TABLE HUELLITAS_TELEFONO_CONTACTO_TB (
    ID_TELEFONO_CONTACTO_PK INT NOT NULL AUTO_INCREMENT,
    ID_ESTADO_FK INT NOT NULL,
    TELEFONO_CONTACTO INT NOT NULL,
    CONSTRAINT HUELLITAS_TELEFONO_CONTACTO_PK PRIMARY KEY (ID_TELEFONO_CONTACTO_PK),
    CONSTRAINT HUELLITAS_TELEFONO_CONTACTO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES HUELLITAS_ESTADO_TB(ID_ESTADO_PK)
);
/
-- Creacion tabla HUELLITAS_ROL_USUARIO_TB
CREATE TABLE HUELLITAS_ROL_USUARIO_TB (
    ID_ROL_USUARIO_PK INT NOT NULL AUTO_INCREMENT,
    ID_ESTADO_FK INT NOT NULL,
    DESCRIPCION_ROL_USUARIO VARCHAR(100) NOT NULL,
    CONSTRAINT HUELLITAS_ROL_USUARIO_PK PRIMARY KEY (ID_ROL_USUARIO_PK),
    CONSTRAINT HUELLITAS_ROL_USUARIO_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES HUELLITAS_ESTADO_TB(ID_ESTADO_PK)
);
/

-- TABLA DE CLAVES DE ENCRIPTACIÓN (PRIMERO POR DEPENDENCIAS)
CREATE TABLE HUELLITAS_CLAVES_ENCRIPTACION_TB (
    ID_CLAVES_ENCRIPTACION_PK INT PRIMARY KEY AUTO_INCREMENT,
    NOMBRE_CLAVE VARCHAR(100) UNIQUE NOT NULL,
    CLAVE_ENCRIPTACION VARCHAR(500) NOT NULL,
    VERSION_CLAVE INT DEFAULT 1,
    FECHA_CREACION DATETIME DEFAULT CURRENT_TIMESTAMP,
    ESTA_ACTIVA BOOLEAN DEFAULT TRUE,
    INDEX IDX_NOMBRE_CLAVE (NOMBRE_CLAVE),
    INDEX IDX_ESTA_ACTIVA (ESTA_ACTIVA)
) ENGINE=INNODB DEFAULT CHARSET=UTF8MB4;

/

-- FUNCIÓN PARA GENERAR SALT ÚNICO
DELIMITER //
CREATE FUNCTION HUELLITAS_GENERAR_SALT_FN()
RETURNS VARCHAR(100)
DETERMINISTIC
BEGIN
    DECLARE salt_generado VARCHAR(100);
    SET salt_generado = SUBSTRING(MD5(RAND()), 1, 16);
    RETURN salt_generado;
END//
DELIMITER ;

-- FUNCIÓN PARA ENCRIPTAR CONTRASEÑA CON SALT
DELIMITER //
CREATE FUNCTION HUELLITAS_ENCRIPTAR_CONTRASENNA_FN(
    P_CONTRASENNA_PLANA VARCHAR(255),
    P_SALT VARCHAR(100)
)
RETURNS VARCHAR(500)
DETERMINISTIC
BEGIN
    DECLARE V_CLAVE_ENCRIPTACION VARCHAR(64);
    DECLARE V_CONTRASENNA_CON_SALT VARCHAR(355);
    DECLARE V_CONTRASENNA_ENCRIPTADA VARCHAR(500);
    
    -- Combinar contraseña + salt
    SET V_CONTRASENNA_CON_SALT = CONCAT(P_CONTRASENNA_PLANA, P_SALT);
    
    -- Obtener clave de encriptación
    SELECT CLAVE_ENCRIPTACION INTO V_CLAVE_ENCRIPTACION
    FROM HUELLITAS_CLAVES_ENCRIPTACION_TB 
    WHERE NOMBRE_CLAVE = 'CLAVE_CONTRASENNA' AND ESTA_ACTIVA = TRUE
    LIMIT 1;
    
    -- Encriptar
    IF V_CLAVE_ENCRIPTACION IS NOT NULL THEN
        SET V_CONTRASENNA_ENCRIPTADA = HEX(AES_ENCRYPT(V_CONTRASENNA_CON_SALT, V_CLAVE_ENCRIPTACION));
    ELSE
        SET V_CONTRASENNA_ENCRIPTADA = NULL;
    END IF;
    
    RETURN V_CONTRASENNA_ENCRIPTADA;
END//
DELIMITER ;

-- 2. CREAR TABLA NUEVA CON LA ESTRUCTURA CORREGIDA
CREATE TABLE HUELLITAS_USUARIOS_TB (
    ID_USUARIO_PK INT NOT NULL AUTO_INCREMENT,
    ID_ESTADO_FK INT NOT NULL,
    ID_ROL_USUARIO_FK INT NOT NULL,
    ID_DIRECCION_FK INT,
    ID_TELEFONO_CONTACTO_FK INT,
    USUARIO_NOMBRE VARCHAR(100),
    USUARIO_CORREO VARCHAR(100) UNIQUE NOT NULL,
    
    -- CAMPOS DE CONTRASEÑA
    USUARIO_CONTRASENNA VARCHAR(255),
    USUARIO_CONTRASENNA_ENCRIPTADA VARCHAR(500),
    USUARIO_SALT VARCHAR(100),
    
    -- CAMPOS ADICIONALES
    USUARIO_IDENTIFICACION INT UNIQUE,
    USUARIO_FECHA_REGISTRO DATE DEFAULT (CURDATE()),  -- CORREGIDO
    USUARIO_ULTIMO_LOGIN DATETIME,
    USUARIO_CUENTA_BANCARIA VARCHAR(50),
    USUARIO_IMAGEN_URL VARCHAR(500) NULL,
    -- CONSTRAINTS
    CONSTRAINT HUELLITAS_USUARIOS_PK PRIMARY KEY (ID_USUARIO_PK),
    CONSTRAINT HUELLITAS_USUARIOS_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES HUELLITAS_ESTADO_TB(ID_ESTADO_PK),
    CONSTRAINT HUELLITAS_USUARIOS_ROL_USUARIO_FK FOREIGN KEY (ID_ROL_USUARIO_FK) REFERENCES HUELLITAS_ROL_USUARIO_TB(ID_ROL_USUARIO_PK),
    CONSTRAINT HUELLITAS_USUARIOS_DIRECCION_FK FOREIGN KEY (ID_DIRECCION_FK) REFERENCES HUELLITAS_DIRECCION_TB(ID_DIRECCION_PK),
    CONSTRAINT HUELLITAS_USUARIOS_TELEFONO_CONTACTO_FK FOREIGN KEY (ID_TELEFONO_CONTACTO_FK) REFERENCES HUELLITAS_TELEFONO_CONTACTO_TB(ID_TELEFONO_CONTACTO_PK)
) ENGINE=INNODB DEFAULT CHARSET=UTF8MB4;


-- FUNCIÓN PARA VERIFICAR CONTRASEÑA
DELIMITER //
CREATE FUNCTION HUELLITAS_VERIFICAR_CONTRASENNA_FN(
    P_USUARIO_ID INT,
    P_CONTRASENNA_INTENTO VARCHAR(255)
)
RETURNS BOOLEAN
DETERMINISTIC
READS SQL DATA
BEGIN
    DECLARE V_CONTRASENNA_ENCRIPTADA VARCHAR(500);
    DECLARE V_SALT VARCHAR(100);
    DECLARE V_CLAVE_ENCRIPTACION VARCHAR(64);
    DECLARE V_CONTRASENNA_DESENCRIPTADA VARCHAR(355);
    DECLARE V_CONTRASENNA_INTENTO_CON_SALT VARCHAR(355);
    
    -- Obtener contraseña encriptada y salt del usuario
    SELECT USUARIO_CONTRASENNA_ENCRIPTADA, USUARIO_SALT 
    INTO V_CONTRASENNA_ENCRIPTADA, V_SALT
    FROM HUELLITAS_USUARIOS_TB 
    WHERE ID_USUARIO_PK = P_USUARIO_ID;
    
    -- Obtener clave de encriptación
    SELECT CLAVE_ENCRIPTACION INTO V_CLAVE_ENCRIPTACION
    FROM HUELLITAS_CLAVES_ENCRIPTACION_TB 
    WHERE NOMBRE_CLAVE = 'CLAVE_CONTRASENNA' AND ESTA_ACTIVA = TRUE
    LIMIT 1;
    
    -- Verificar que todos los datos existan
    IF V_CONTRASENNA_ENCRIPTADA IS NULL OR V_SALT IS NULL OR V_CLAVE_ENCRIPTACION IS NULL THEN
        RETURN FALSE;
    END IF;
    
    -- Combinar intento + salt
    SET V_CONTRASENNA_INTENTO_CON_SALT = CONCAT(P_CONTRASENNA_INTENTO, V_SALT);
    
    -- Desencriptar contraseña almacenada
    SET V_CONTRASENNA_DESENCRIPTADA = AES_DECRYPT(UNHEX(V_CONTRASENNA_ENCRIPTADA), V_CLAVE_ENCRIPTACION);
    
    -- Comparar
    IF V_CONTRASENNA_INTENTO_CON_SALT = V_CONTRASENNA_DESENCRIPTADA THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
END//
DELIMITER ;



-- TRIGGER PARA ENCRIPTAR CONTRASEÑA AUTOMÁTICAMENTE
DELIMITER //
CREATE TRIGGER HUELLITAS_ANTES_INSERTAR_USUARIO_TR
BEFORE INSERT ON HUELLITAS_USUARIOS_TB
FOR EACH ROW
BEGIN
    DECLARE V_SALT VARCHAR(100);
    
    -- Generar salt único para cada usuario
    SET V_SALT = HUELLITAS_GENERAR_SALT_FN();
    SET NEW.USUARIO_SALT = V_SALT;
    
    -- Encriptar contraseña
    IF NEW.USUARIO_CONTRASENNA IS NOT NULL THEN
        SET NEW.USUARIO_CONTRASENNA_ENCRIPTADA = HUELLITAS_ENCRIPTAR_CONTRASENNA_FN(
            NEW.USUARIO_CONTRASENNA, 
            V_SALT
        );
        -- Limpiar contraseña en texto plano (opcional por seguridad)
        SET NEW.USUARIO_CONTRASENNA = NULL;
    END IF;
END//
DELIMITER ;

-- Trigger para actualizaciones
DELIMITER //
CREATE TRIGGER HUELLITAS_ANTES_ACTUALIZAR_USUARIO_TR
BEFORE UPDATE ON HUELLITAS_USUARIOS_TB
FOR EACH ROW
BEGIN
    -- Si se está asignando una nueva contraseña (no nula)
    IF NEW.USUARIO_CONTRASENNA IS NOT NULL THEN
        -- Generar nuevo salt
        SET NEW.USUARIO_SALT = HUELLITAS_GENERAR_SALT_FN();
        
        -- Encriptar nueva contraseña
        SET NEW.USUARIO_CONTRASENNA_ENCRIPTADA = HUELLITAS_ENCRIPTAR_CONTRASENNA_FN(
            NEW.USUARIO_CONTRASENNA, 
            NEW.USUARIO_SALT
        );
        
        -- Limpiar contraseña en texto plano
        SET NEW.USUARIO_CONTRASENNA = NULL;
    END IF;
END//
DELIMITER ;

-- PROCEDIMIENTO PARA CAMBIAR CONTRASEÑA
DELIMITER //
CREATE PROCEDURE HUELLITAS_CAMBIAR_CONTRASENNA_SP(
    IN P_USUARIO_ID INT,
    IN P_CONTRASENNA_ACTUAL VARCHAR(255),
    IN P_CONTRASENNA_NUEVA VARCHAR(255)
)
BEGIN
    DECLARE V_CONTRASENNA_VALIDA BOOLEAN;
    DECLARE V_SALT_ANTERIOR VARCHAR(100);
    
    -- Verificar contraseña actual
    SET V_CONTRASENNA_VALIDA = HUELLITAS_VERIFICAR_CONTRASENNA_FN(P_USUARIO_ID, P_CONTRASENNA_ACTUAL);
    
    IF V_CONTRASENNA_VALIDA THEN
        -- Obtener salt anterior (para debug)
        SELECT USUARIO_SALT INTO V_SALT_ANTERIOR FROM HUELLITAS_USUARIOS_TB WHERE ID_USUARIO_PK = P_USUARIO_ID;
        
        -- Actualizar contraseña (el trigger se encarga de la encriptación)
        UPDATE HUELLITAS_USUARIOS_TB 
        SET USUARIO_CONTRASENNA = P_CONTRASENNA_NUEVA
        WHERE ID_USUARIO_PK = P_USUARIO_ID;
        
        SELECT 
            'CONTRASEÑA ACTUALIZADA EXITOSAMENTE' AS MENSAJE,
            'Salt anterior: ' || V_SALT_ANTERIOR AS DEBUG_INFO;
    ELSE
        SELECT 'ERROR: CONTRASEÑA ACTUAL INCORRECTA' AS MENSAJE;
    END IF;
END//
DELIMITER ;


-- PROCEDIMIENTO PARA LOGIN
DELIMITER //
CREATE PROCEDURE HUELLITAS_VALIDAR_LOGIN_SP(
    IN P_USUARIO_CORREO VARCHAR(100),
    IN P_CONTRASENNA_INTENTO VARCHAR(255)
)
BEGIN
    DECLARE V_USUARIO_ID INT;
    DECLARE V_CONTRASENNA_VALIDA BOOLEAN;
    DECLARE V_ID_ESTADO_FK INT;
    
    -- OBTENER DATOS DEL USUARIO
    SELECT 
        ID_USUARIO_PK, 
        ID_ESTADO_FK
    INTO 
        V_USUARIO_ID, 
        V_ID_ESTADO_FK
    FROM HUELLITAS_USUARIOS_TB 
    WHERE USUARIO_CORREO = P_USUARIO_CORREO;
    
    IF V_USUARIO_ID IS NULL THEN
        SELECT 'ERROR: USUARIO NO ENCONTRADO' AS MENSAJE, FALSE AS LOGIN_EXITOSO;
    ELSEIF V_ID_ESTADO_FK != 1 THEN  -- 1 = ACTIVO, 0 = INACTIVO
        SELECT 'ERROR: USUARIO INACTIVO' AS MENSAJE, FALSE AS LOGIN_EXITOSO;
    ELSE
        -- VERIFICAR CONTRASEÑA
        SET V_CONTRASENNA_VALIDA = HUELLITAS_VERIFICAR_CONTRASENNA_FN(V_USUARIO_ID, P_CONTRASENNA_INTENTO);
        
        IF V_CONTRASENNA_VALIDA THEN
            -- ACTUALIZAR ÚLTIMO LOGIN
            UPDATE HUELLITAS_USUARIOS_TB 
            SET USUARIO_ULTIMO_LOGIN = NOW()
            WHERE ID_USUARIO_PK = V_USUARIO_ID;
            
            -- Modificado por DAVID
			SELECT
				'LOGIN EXITOSO' AS MENSAJE,
				TRUE AS LOGIN_EXITOSO,
				U.ID_USUARIO_PK AS ID_USUARIO,
				U.USUARIO_NOMBRE,
				U.USUARIO_CORREO,
				R.DESCRIPCION_ROL_USUARIO AS ROL
			FROM HUELLITAS_USUARIOS_TB U
			JOIN HUELLITAS_ROL_USUARIO_TB R ON U.ID_ROL_USUARIO_FK = R.ID_ROL_USUARIO_PK
			WHERE U.ID_USUARIO_PK = V_USUARIO_ID;
        ELSE
            SELECT 'ERROR: CONTRASEÑA INCORRECTA' AS MENSAJE, FALSE AS LOGIN_EXITOSO;
        END IF;
    END IF;
END//
DELIMITER ;


-- TABLA DE TARJETAS (DEPENDE DE USUARIOS)
CREATE TABLE HUELLITAS_TARJETAS_TB (
    ID_TARJETA_PK INT PRIMARY KEY AUTO_INCREMENT,
    ID_USUARIO_FK INT NOT NULL,
    TIPO_TARJETA ENUM('CREDITO', 'DEBITO') NOT NULL,
    MARCA_TARJETA ENUM('VISA', 'MASTERCARD', 'AMEX', 'DINERS', 'OTHER') NOT NULL,
    NOMBRE_TITULAR VARCHAR(255) NOT NULL,
    NUMERO_TARJETA_ENCRIPTADO VARCHAR(500) NOT NULL,
    ULTIMOS_CUATRO_DIGITOS CHAR(4) NOT NULL,
    FECHA_VENCIMIENTO DATE NOT NULL,  -- EL FRONTEND VALIDA QUE SEA FUTURA
    CVV_ENCRIPTADO VARCHAR(500) NOT NULL,
    ES_PREDETERMINADO BOOLEAN DEFAULT FALSE,
    FECHA_REGISTRO DATETIME DEFAULT CURRENT_TIMESTAMP,
    FECHA_ACTUALIZACION DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    ESTA_ACTIVO BOOLEAN DEFAULT TRUE,
    TOKEN_PROVEEDOR VARCHAR(500) NULL,
    IP_REGISTRO VARCHAR(45) NULL,
    
    CONSTRAINT HUELLITAS_TARJETAS_USUARIO_FK 
    FOREIGN KEY (ID_USUARIO_FK) REFERENCES HUELLITAS_USUARIOS_TB(ID_USUARIO_PK) ON DELETE CASCADE,
    
    INDEX IDX_TARJETAS_USUARIO (ID_USUARIO_FK),
    INDEX IDX_TARJETAS_ACTIVAS (ESTA_ACTIVO),
    UNIQUE KEY UNIQUE_TARJETA_PREDETERMINADA (ID_USUARIO_FK, ES_PREDETERMINADO)
) ENGINE=INNODB DEFAULT CHARSET=UTF8MB4;

DELIMITER //
CREATE FUNCTION HUELLITAS_GENERAR_CLAVE_AES_FN()
RETURNS VARCHAR(64)
DETERMINISTIC
BEGIN
    RETURN UPPER(SUBSTRING(SHA2(RAND(), 256), 1, 64));
END//
DELIMITER ;

-- 2. FUNCIÓN DE ENCRIPTACIÓN (SIMPLIFICADA)

DELIMITER //
CREATE FUNCTION HUELLITAS_ENCRIPTAR_DATO_FN(
    P_TEXTO_PLANO TEXT,
    P_NOMBRE_CLAVE VARCHAR(100)
)
RETURNS TEXT
DETERMINISTIC
BEGIN
    DECLARE V_CLAVE_ENCRIPTACION VARCHAR(64);
    DECLARE V_TEXTO_ENCRIPTADO TEXT;
    
    -- Obtener clave
    SELECT CLAVE_ENCRIPTACION INTO V_CLAVE_ENCRIPTACION
    FROM HUELLITAS_CLAVES_ENCRIPTACION_TB 
    WHERE NOMBRE_CLAVE = P_NOMBRE_CLAVE AND ESTA_ACTIVA = TRUE
    LIMIT 1;
    
    -- Validar clave
    IF V_CLAVE_ENCRIPTACION IS NULL THEN
        RETURN NULL;
    END IF;
    
    -- Encriptar
    SET V_TEXTO_ENCRIPTADO = HEX(AES_ENCRYPT(P_TEXTO_PLANO, V_CLAVE_ENCRIPTACION));
    RETURN V_TEXTO_ENCRIPTADO;
END//
DELIMITER ;

-- 3. FUNCIÓN DE DESENCRIPTACIÓN (SIMPLIFICADA)
DELIMITER //
CREATE FUNCTION HUELLITAS_DESENCRIPTAR_DATO_FN(
    P_TEXTO_ENCRIPTADO TEXT,
    P_NOMBRE_CLAVE VARCHAR(100)
)
RETURNS TEXT
DETERMINISTIC
BEGIN
    DECLARE V_CLAVE_ENCRIPTACION VARCHAR(64);
    DECLARE V_TEXTO_DESENCRIPTADO TEXT;
    
    -- Obtener clave
    SELECT CLAVE_ENCRIPTACION INTO V_CLAVE_ENCRIPTACION
    FROM HUELLITAS_CLAVES_ENCRIPTACION_TB 
    WHERE NOMBRE_CLAVE = P_NOMBRE_CLAVE AND ESTA_ACTIVA = TRUE
    LIMIT 1;
    
    -- Validar clave
    IF V_CLAVE_ENCRIPTACION IS NULL THEN
        RETURN NULL;
    END IF;
    
    -- Desencriptar
    SET V_TEXTO_DESENCRIPTADO = AES_DECRYPT(UNHEX(P_TEXTO_ENCRIPTADO), V_CLAVE_ENCRIPTACION);
    RETURN V_TEXTO_DESENCRIPTADO;
END//
DELIMITER ;

-- 1. PROCEDIMIENTO DE INICIALIZACIÓN
DELIMITER //
CREATE PROCEDURE HUELLITAS_INICIALIZAR_CLAVE_ENCRIPTACION_SP(
    IN P_NOMBRE_CLAVE VARCHAR(100)
)
BEGIN
    DECLARE V_CLAVE_EXISTENTE INT;
    
    SELECT COUNT(*) INTO V_CLAVE_EXISTENTE 
    FROM HUELLITAS_CLAVES_ENCRIPTACION_TB 
    WHERE NOMBRE_CLAVE = P_NOMBRE_CLAVE AND ESTA_ACTIVA = TRUE;
    
    IF V_CLAVE_EXISTENTE = 0 THEN
        INSERT INTO HUELLITAS_CLAVES_ENCRIPTACION_TB (NOMBRE_CLAVE, CLAVE_ENCRIPTACION, VERSION_CLAVE)
        VALUES (P_NOMBRE_CLAVE, HUELLITAS_GENERAR_CLAVE_AES_FN(), 1);
    END IF;
END//
DELIMITER ;

-- 8. PROCEDIMIENTO PARA AGREGAR TARJETA (SIMPLIFICADO)

DELIMITER //
CREATE PROCEDURE HUELLITAS_AGREGAR_TARJETA_SP(
    IN P_ID_USUARIO_FK INT,
    IN P_TIPO_TARJETA ENUM('CREDITO', 'DEBITO'),
    IN P_MARCA_TARJETA ENUM('VISA', 'MASTERCARD', 'AMEX', 'DINERS', 'OTHER'),
    IN P_NOMBRE_TITULAR VARCHAR(255),
    IN P_NUMERO_TARJETA VARCHAR(16),
    IN P_FECHA_VENCIMIENTO DATE,  -- EL FRONTEND VALIDA
    IN P_CVV VARCHAR(3),
    IN P_ES_PREDETERMINADO BOOLEAN,
    IN P_IP_REGISTRO VARCHAR(45)
)
BEGIN
    DECLARE V_USUARIO_EXISTE INT;
    
    SELECT COUNT(*) INTO V_USUARIO_EXISTE 
    FROM HUELLITAS_USUARIOS_TB 
    WHERE ID_USUARIO_PK = P_ID_USUARIO_FK;
    
    IF V_USUARIO_EXISTE = 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'USUARIO NO ENCONTRADO';
    END IF;
    
    INSERT INTO HUELLITAS_TARJETAS_TB (
        ID_USUARIO_FK, TIPO_TARJETA, MARCA_TARJETA, NOMBRE_TITULAR,
        NUMERO_TARJETA_ENCRIPTADO, FECHA_VENCIMIENTO, CVV_ENCRIPTADO,
        ES_PREDETERMINADO, IP_REGISTRO
    ) VALUES (
        P_ID_USUARIO_FK, P_TIPO_TARJETA, P_MARCA_TARJETA, P_NOMBRE_TITULAR,
        P_NUMERO_TARJETA, P_FECHA_VENCIMIENTO, P_CVV,
        P_ES_PREDETERMINADO, P_IP_REGISTRO
    );
    
    SELECT 'TARJETA AGREGADA EXITOSAMENTE' AS MENSAJE;
END//

DELIMITER ;

-- 9. PROCEDIMIENTO PARA OBTENER TARJETAS DE USUARIO (CORREGIDO)
DELIMITER //
CREATE PROCEDURE HUELLITAS_OBTENER_TARJETAS_USUARIO_SP(
    IN P_ID_USUARIO_FK INT
)
BEGIN
    SELECT 
        ID_TARJETA_PK, 
        TIPO_TARJETA, 
        MARCA_TARJETA, 
        NOMBRE_TITULAR,
        ULTIMOS_CUATRO_DIGITOS, 
        DATE_FORMAT(FECHA_VENCIMIENTO, '%m/%Y') AS FECHA_VENCIMIENTO_FORMATEADA,
        ES_PREDETERMINADO, 
        FECHA_REGISTRO,
        -- ESTADO SIMPLIFICADO: EL FRONTEND MANEJA LA LÓGICA DE VENCIMIENTO
        'VIGENTE' AS ESTADO_TARJETA
    FROM HUELLITAS_TARJETAS_TB
    WHERE ID_USUARIO_FK = P_ID_USUARIO_FK AND ESTA_ACTIVO = TRUE
    ORDER BY ES_PREDETERMINADO DESC, FECHA_REGISTRO DESC;
END//

-- 10. PROCEDIMIENTO DE ROTACIÓN DE CLAVES (CORREGIDO - SIN CAMBIOS NECESARIOS)
CREATE PROCEDURE HUELLITAS_ROTAR_CLAVES_ENCRIPTACION_SP(
    IN P_NOMBRE_CLAVE VARCHAR(100),
    IN P_NUEVA_VERSION INT
)
BEGIN
    DECLARE V_FINALIZADO INT DEFAULT 0;
    DECLARE V_ID_TARJETA INT;
    DECLARE V_NUMERO_ENCRIPTADO TEXT;
    DECLARE V_CVV_ENCRIPTADO TEXT;
    
    DECLARE CUR_TARJETAS CURSOR FOR 
    SELECT ID_TARJETA_PK, NUMERO_TARJETA_ENCRIPTADO, CVV_ENCRIPTADO 
    FROM HUELLITAS_TARJETAS_TB WHERE ESTA_ACTIVO = TRUE;
    
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET V_FINALIZADO = 1;
    
    UPDATE HUELLITAS_CLAVES_ENCRIPTACION_TB 
    SET ESTA_ACTIVA = FALSE 
    WHERE NOMBRE_CLAVE = P_NOMBRE_CLAVE AND ESTA_ACTIVA = TRUE;
    
    INSERT INTO HUELLITAS_CLAVES_ENCRIPTACION_TB (NOMBRE_CLAVE, CLAVE_ENCRIPTACION, VERSION_CLAVE)
    VALUES (P_NOMBRE_CLAVE, HUELLITAS_GENERAR_CLAVE_AES_FN(), P_NUEVA_VERSION);
    
    OPEN CUR_TARJETAS;
    BUCLE_REENCRIPTACION: LOOP
        FETCH CUR_TARJETAS INTO V_ID_TARJETA, V_NUMERO_ENCRIPTADO, V_CVV_ENCRIPTADO;
        IF V_FINALIZADO = 1 THEN LEAVE BUCLE_REENCRIPTACION; END IF;
        
        UPDATE HUELLITAS_TARJETAS_TB 
        SET NUMERO_TARJETA_ENCRIPTADO = HUELLITAS_ENCRIPTAR_DATO_FN(
            HUELLITAS_DESENCRIPTAR_DATO_FN(V_NUMERO_ENCRIPTADO, P_NOMBRE_CLAVE), P_NOMBRE_CLAVE
        ),
        CVV_ENCRIPTADO = HUELLITAS_ENCRIPTAR_DATO_FN(
            HUELLITAS_DESENCRIPTAR_DATO_FN(V_CVV_ENCRIPTADO, P_NOMBRE_CLAVE), P_NOMBRE_CLAVE
        )
        WHERE ID_TARJETA_PK = V_ID_TARJETA;
    END LOOP;
    CLOSE CUR_TARJETAS;
END//

DELIMITER ;


-- 11. TRIGGER PARA INSERTAR TARJETAS (SIMPLIFICADO)
DELIMITER //
CREATE TRIGGER HUELLITAS_ANTES_INSERTAR_TARJETA_TR
BEFORE INSERT ON HUELLITAS_TARJETAS_TB
FOR EACH ROW
BEGIN
    -- SOLO ENCRIPTACIÓN, SIN VALIDACIONES DE FECHA
    IF NEW.NUMERO_TARJETA_ENCRIPTADO IS NOT NULL THEN
        SET NEW.NUMERO_TARJETA_ENCRIPTADO = HUELLITAS_ENCRIPTAR_DATO_FN(
            NEW.NUMERO_TARJETA_ENCRIPTADO, 'CLAVE_NUMERO_TARJETA'
        );
    END IF;
    
    IF NEW.CVV_ENCRIPTADO IS NOT NULL THEN
        SET NEW.CVV_ENCRIPTADO = HUELLITAS_ENCRIPTAR_DATO_FN(
            NEW.CVV_ENCRIPTADO, 'CLAVE_CVV'
        );
    END IF;
    
    IF NEW.ULTIMOS_CUATRO_DIGITOS IS NULL AND NEW.NUMERO_TARJETA_ENCRIPTADO IS NOT NULL THEN
        SET NEW.ULTIMOS_CUATRO_DIGITOS = RIGHT(NEW.NUMERO_TARJETA_ENCRIPTADO, 4);
    END IF;
END// 

DELIMITER ;


-- 12. TRIGGER PARA ACTUALIZAR TARJETAS (SIMPLIFICADO)
DELIMITER //
CREATE TRIGGER HUELLITAS_ANTES_ACTUALIZAR_TARJETA_TR
BEFORE UPDATE ON HUELLITAS_TARJETAS_TB
FOR EACH ROW
BEGIN
    -- SOLO ENCRIPTACIÓN, SIN VALIDACIONES DE FECHA
    IF NEW.NUMERO_TARJETA_ENCRIPTADO != OLD.NUMERO_TARJETA_ENCRIPTADO THEN
        SET NEW.NUMERO_TARJETA_ENCRIPTADO = HUELLITAS_ENCRIPTAR_DATO_FN(
            NEW.NUMERO_TARJETA_ENCRIPTADO, 'CLAVE_NUMERO_TARJETA'
        );
        SET NEW.ULTIMOS_CUATRO_DIGITOS = RIGHT(NEW.NUMERO_TARJETA_ENCRIPTADO, 4);
    END IF;
    
    IF NEW.CVV_ENCRIPTADO != OLD.CVV_ENCRIPTADO THEN
        SET NEW.CVV_ENCRIPTADO = HUELLITAS_ENCRIPTAR_DATO_FN(
            NEW.CVV_ENCRIPTADO, 'CLAVE_CVV'
        );
    END IF;
END//
DELIMITER ;

-- 13. VISTA SEGURA DE TARJETAS
DELIMITER //
CREATE VIEW HUELLITAS_TARJETAS_SEGURAS_VW AS
SELECT 
    ID_TARJETA_PK, ID_USUARIO_FK, TIPO_TARJETA, MARCA_TARJETA,
    NOMBRE_TITULAR, ULTIMOS_CUATRO_DIGITOS,
    CONCAT('**/', RIGHT(DATE_FORMAT(FECHA_VENCIMIENTO, '%m/%Y'), 2)) AS FECHA_VENCIMIENTO_ENMASCARADA,
    ES_PREDETERMINADO, FECHA_REGISTRO, ESTA_ACTIVO
FROM HUELLITAS_TARJETAS_TB
WHERE ESTA_ACTIVO = TRUE;
DELIMITER ;

-- 15. VERIFICAR CLAVES CREADAS
SELECT 'SISTEMA INICIALIZADO CORRECTAMENTE' AS ESTADO;
SELECT NOMBRE_CLAVE, VERSION_CLAVE, FECHA_CREACION 
FROM HUELLITAS_CLAVES_ENCRIPTACION_TB 
WHERE ESTA_ACTIVA = TRUE;


-- Creacion tabla HUELLITAS_MASCOTA_ESPECIE_TB
CREATE TABLE HUELLITAS_MASCOTA_ESPECIE_TB (
    ID_MASCOTA_ESPECIE_PK INT NOT NULL AUTO_INCREMENT,
    ID_ESTADO_FK INT NOT NULL,
    NOMBRE_ESPECIE VARCHAR(100) NOT NULL,
    CONSTRAINT HUELLITAS_MASCOTA_ESPECIE_PK PRIMARY KEY (ID_MASCOTA_ESPECIE_PK),
    CONSTRAINT HUELLITAS_MASCOTA_ESPECIE_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES HUELLITAS_ESTADO_TB(ID_ESTADO_PK)
);
/




-- Creacion tabla HUELLITAS_MASCOTA_RAZA_TB
CREATE TABLE HUELLITAS_MASCOTA_RAZA_TB (
    ID_MASCOTA_RAZA_PK INT NOT NULL AUTO_INCREMENT,
    ID_ESTADO_FK INT NOT NULL,
    NOMBRE_RAZA VARCHAR(100) NOT NULL,
    CONSTRAINT HUELLITAS_MASCOTA_RAZA_PK PRIMARY KEY (ID_MASCOTA_RAZA_PK),
    CONSTRAINT HUELLITAS_MASCOTA_RAZA_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES HUELLITAS_ESTADO_TB(ID_ESTADO_PK)
);
/
-- Creacion tabla HUELLITAS_MASCOTA_TB
CREATE TABLE HUELLITAS_MASCOTA_TB (
    ID_MASCOTA_PK INT NOT NULL AUTO_INCREMENT,
    ID_ESTADO_FK INT NOT NULL,
    ID_MASCOTA_ESPECIE_FK INT NOT NULL,
    ID_MASCOTA_RAZA_FK INT,
    ID_USUARIO_FK INT,
    NOMBRE_MASCOTA VARCHAR(100),
    FECHA_NACIMIENTO DATE,
    GENERO VARCHAR(10) NOT NULL,
    MASCOTA_IMAGEN_URL VARCHAR(500),
    CONSTRAINT HUELLITAS_MASCOTA_PK PRIMARY KEY (ID_MASCOTA_PK),
    CONSTRAINT HUELLITAS_MASCOTA_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES HUELLITAS_ESTADO_TB(ID_ESTADO_PK),
    CONSTRAINT HUELLITAS_MASCOTA_ESPECIE_FK FOREIGN KEY (ID_MASCOTA_ESPECIE_FK) REFERENCES HUELLITAS_MASCOTA_ESPECIE_TB(ID_MASCOTA_ESPECIE_PK),
    CONSTRAINT HUELLITAS_MASCOTA_RAZA_FK FOREIGN KEY (ID_MASCOTA_RAZA_FK) REFERENCES HUELLITAS_MASCOTA_RAZA_TB(ID_MASCOTA_RAZA_PK),
    CONSTRAINT HUELLITAS_MASCOTA_USUARIO_FK FOREIGN KEY (ID_USUARIO_FK) REFERENCES HUELLITAS_USUARIOS_TB(ID_USUARIO_PK)
);
/
-- Creacion tabla HUELLITAS_TIPO_EXAMEN_TB
CREATE TABLE HUELLITAS_TIPO_EXAMEN_TB (
    ID_TIPO_EXAMEN_PK INT NOT NULL AUTO_INCREMENT,
    ID_ESTADO_FK INT NOT NULL,
    DESCRIPCION_EXAMEN VARCHAR(200) NOT NULL,
    CONSTRAINT HUELLITAS_TIPO_EXAMEN_PK PRIMARY KEY (ID_TIPO_EXAMEN_PK),
    CONSTRAINT HUELLITAS_TIPO_EXAMEN_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES HUELLITAS_ESTADO_TB(ID_ESTADO_PK)
);
/
-- Creacion tabla HUELLITAS_EXAMENES_TB
CREATE TABLE HUELLITAS_EXAMENES_TB (
    ID_EXAMEN_PK INT NOT NULL AUTO_INCREMENT,
    ID_MASCOTA_FK INT NOT NULL,
    ID_ESTADO_FK INT NOT NULL,
    ID_TIPO_EXAMEN_FK INT NOT NULL,
    EXAMEN_RESULTADO VARCHAR(100) NOT NULL,
    EXAMEN_FECHA_SEGUIMIENTO DATE,
    CONSTRAINT HUELLITAS_EXAMENES_PK PRIMARY KEY (ID_EXAMEN_PK),
    CONSTRAINT HUELLITAS_EXAMENES_MASCOTA_FK FOREIGN KEY (ID_MASCOTA_FK) REFERENCES HUELLITAS_MASCOTA_TB(ID_MASCOTA_PK),
    CONSTRAINT HUELLITAS_EXAMENES_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES HUELLITAS_ESTADO_TB(ID_ESTADO_PK),
    CONSTRAINT HUELLITAS_EXAMENES_TIPO_EXAMEN_FK FOREIGN KEY (ID_TIPO_EXAMEN_FK) REFERENCES HUELLITAS_TIPO_EXAMEN_TB(ID_TIPO_EXAMEN_PK)
);
/
-- Creacion tabla HUELLITAS_CONSULTA_MOTIVO_TB
CREATE TABLE HUELLITAS_CONSULTA_MOTIVO_TB (
    ID_CONSULTA_MOTIVO_PK INT NOT NULL AUTO_INCREMENT,
    ID_ESTADO_FK INT NOT NULL,
    DESCRIPCION_MOTIVO VARCHAR(200) NOT NULL,
    CONSTRAINT HUELLITAS_CONSULTA_MOTIVO_PK PRIMARY KEY (ID_CONSULTA_MOTIVO_PK),
    CONSTRAINT HUELLITAS_CONSULTA_MOTIVO_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES HUELLITAS_ESTADO_TB(ID_ESTADO_PK)
);
/
-- Creacion tabla HUELLITAS_CONSULTAS_TB
CREATE TABLE HUELLITAS_CONSULTAS_TB (
    ID_CONSULTA_PK INT NOT NULL AUTO_INCREMENT,
    CONSULTA_FECHA DATE NOT NULL,
    ID_CONSULTA_MOTIVO_FK INT NOT NULL,
    ID_ESTADO_FK INT NOT NULL,
    ID_MASCOTA_FK INT NOT NULL,
    ID_USUARIO_FK INT,
    CONSULTA_OBSERVACIONES VARCHAR(100),
    CONSTRAINT HUELLITAS_CONSULTAS_PK PRIMARY KEY (ID_CONSULTA_PK),
    CONSTRAINT HUELLITAS_CONSULTAS_MOTIVO_FK FOREIGN KEY (ID_CONSULTA_MOTIVO_FK) REFERENCES HUELLITAS_CONSULTA_MOTIVO_TB(ID_CONSULTA_MOTIVO_PK),
    CONSTRAINT HUELLITAS_CONSULTAS_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES HUELLITAS_ESTADO_TB(ID_ESTADO_PK),
    CONSTRAINT HUELLITAS_CONSULTAS_MASCOTA_FK FOREIGN KEY (ID_MASCOTA_FK) REFERENCES HUELLITAS_MASCOTA_TB(ID_MASCOTA_PK),
    CONSTRAINT HUELLITAS_CONSULTAS_USUARIO_FK FOREIGN KEY (ID_USUARIO_FK) REFERENCES HUELLITAS_USUARIOS_TB(ID_USUARIO_PK)
);
/
-- Creacion tabla HUELLITAS_FACTURACIONES_TB
CREATE TABLE HUELLITAS_FACTURACIONES_TB (
    ID_FACTURA_PK VARCHAR(50),
    ID_CONSULTA_FK INT NOT NULL,
    ID_ESTADO_FK INT NOT NULL,
    FACTURA_FECHA_EMISION DATE NOT NULL,
    FACTURA_MONTO_TOTAL INT NOT NULL,
    FACTURA_DESCUENTO INT,
    FACTURA_IMPUESTOS INT NOT NULL,
    FACTURA_MONTO_FINAL INT NOT NULL,
    FACTURA_SUBTOTAL INT NOT NULL,
    CONSTRAINT HUELLITAS_FACTURACIONES_PK PRIMARY KEY (ID_FACTURA_PK),
    CONSTRAINT HUELLITAS_FACTURACIONES_CONSULTA_FK FOREIGN KEY (ID_CONSULTA_FK) REFERENCES HUELLITAS_CONSULTAS_TB(ID_CONSULTA_PK),
    CONSTRAINT HUELLITAS_FACTURACIONES_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES HUELLITAS_ESTADO_TB(ID_ESTADO_PK)
);
/
-- Creacion tabla HUELLITAS_PROVEEDORES_TB
CREATE TABLE HUELLITAS_PROVEEDORES_TB (
    ID_PROVEEDOR_PK INT NOT NULL AUTO_INCREMENT,
    ID_ESTADO_FK INT NOT NULL,
    ID_DIRECCION_FK INT,
    ID_TELEFONO_CONTACTO_FK INT,
    PROVEEDOR_NOMBRE VARCHAR(100) NOT NULL,
    PROVEEDOR_CORREO VARCHAR(100),
    NOMBRE_REPRESENTANTE VARCHAR(100),
    PROVEEDOR_DESCRIPCION_PRODUCTOS VARCHAR(200),
    CONSTRAINT HUELLITAS_PROVEEDORES_PK PRIMARY KEY (ID_PROVEEDOR_PK),
    CONSTRAINT HUELLITAS_PROVEEDORES_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES HUELLITAS_ESTADO_TB(ID_ESTADO_PK),
    CONSTRAINT HUELLITAS_PROVEEDORES_DIRECCION_FK FOREIGN KEY (ID_DIRECCION_FK) REFERENCES HUELLITAS_DIRECCION_TB(ID_DIRECCION_PK),
    CONSTRAINT HUELLITAS_PROVEEDORES_TELEFONO_CONTACTO_FK FOREIGN KEY (ID_TELEFONO_CONTACTO_FK) REFERENCES HUELLITAS_TELEFONO_CONTACTO_TB(ID_TELEFONO_CONTACTO_PK)
);

-- Creacion tabla HUELLITAS_PRODUCTOS_CATEGORIA_TB
CREATE TABLE HUELLITAS_PRODUCTOS_CATEGORIA_TB(
	ID_ESTADO_FK INT NOT NULL,
    ID_CATEGORIA_PK INT NOT NULL AUTO_INCREMENT,
    DESCRIPCION_CATEGORIA VARCHAR(100) NOT NULL,
    CONSTRAINT HUELLITAS_PRODUCTOS_CATEGORIA_PK PRIMARY KEY (ID_CATEGORIA_PK),
    CONSTRAINT HUELLITAS_PRODUCTOS_CATEGORIA_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES HUELLITAS_ESTADO_TB(ID_ESTADO_PK)
);

-- Creacion tabla HUELLITAS_MARCAS_TB
CREATE TABLE HUELLITAS_MARCAS_TB(
ID_MARCA_PK INT NOT NULL auto_increment,
NOMBRE_MARCA VARCHAR(100) NOT NULL,
ID_ESTADO_FK INT NOT NULL,
MARCA_IMAGEN_URL VARCHAR(500) NULL,
CONSTRAINT HUELLITAS_MARCAS_PK PRIMARY KEY (ID_MARCA_PK),
CONSTRAINT HUELLITAS_MARCAS_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES HUELLITAS_ESTADO_TB(ID_ESTADO_PK)
);

-- Creacion tabla HUELLITAS_PRODUCTOS_TB
CREATE TABLE HUELLITAS_PRODUCTOS_TB (
    ID_PRODUCTO_PK INT NOT NULL AUTO_INCREMENT,
    ID_PROVEEDOR_FK INT NOT NULL,
    ID_ESTADO_FK INT NOT NULL,
    ID_CATEGORIA_FK INT NOT NULL,
    ID_MARCA_FK INT NOT NULL,
    ID_NUEVO_FK INT NOT NULL,
    PRODUCTO_NOMBRE VARCHAR(100) NOT NULL,
    PRODUCTO_DESCRIPCION VARCHAR(200) NOT NULL,
    PRODUCTO_PRECIO_UNITARIO DECIMAL(10,2) NOT NULL,
    PRODUCTO_STOCK INT NOT NULL,
    IMAGEN_URL VARCHAR(255),
    FECHA_CREACION DATETIME DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT HUELLITAS_PRODUCTOS_PK PRIMARY KEY (ID_PRODUCTO_PK),
    CONSTRAINT HUELLITAS_PRODUCTOS_NUEVO_FK FOREIGN KEY (ID_NUEVO_FK) REFERENCES HUELLITAS_NUEVO_TB(ID_NUEVO_PK),
    CONSTRAINT HUELLITAS_PRODUCTOS_PROVEEDOR_FK FOREIGN KEY (ID_PROVEEDOR_FK) REFERENCES HUELLITAS_PROVEEDORES_TB(ID_PROVEEDOR_PK),
    CONSTRAINT HUELLITAS_PRODUCTOS_CATEGORIA_FK FOREIGN KEY (ID_CATEGORIA_FK) REFERENCES HUELLITAS_PRODUCTOS_CATEGORIA_TB(ID_CATEGORIA_PK),
    CONSTRAINT HUELLITAS_PRODUCTOS_MARCAS_FK FOREIGN KEY (ID_MARCA_FK) REFERENCES HUELLITAS_MARCAS_TB(ID_MARCA_PK),
    CONSTRAINT HUELLITAS_PRODUCTOS_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES HUELLITAS_ESTADO_TB(ID_ESTADO_PK)
);

-- Agregado por David
-- Creacion tabla HUELLITAS_SLIDER_BANNER_TB
CREATE TABLE HUELLITAS_SLIDER_BANNER_TB (
    ID_SLIDER_BANNER_PK INT NOT NULL AUTO_INCREMENT,
    IMAGEN_URL VARCHAR(500) NOT NULL,
    DESCRIPCION_SLIDER_BANNER VARCHAR(255),
    ID_ESTADO_FK INT NOT NULL,
    CONSTRAINT HUELLITAS_SLIDER_BANNER_PK PRIMARY KEY (ID_SLIDER_BANNER_PK),
    CONSTRAINT HUELLITAS_SLIDER_BANNER_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES HUELLITAS_ESTADO_TB(ID_ESTADO_PK)
);

-- Creacion tabla HUELLITAS_DETALLE_FACTURA_TB
CREATE TABLE HUELLITAS_DETALLE_FACTURA_TB (
    ID_FACTURA_FK VARCHAR(50),
    LINEA INT NOT NULL,
    ID_ESTADO_FK INT NOT NULL,
    ID_PRODUCTO_FK INT NOT NULL,
    MONTO_UNITARIO INT NOT NULL,
    CANTIDAD INT NOT NULL,
    TOTAL INT NOT NULL,
    CONSTRAINT HUELLITAS_DETALLE_FACTURA_PK PRIMARY KEY (ID_FACTURA_FK, LINEA),
    CONSTRAINT HUELLITAS_DETALLE_FACTURA_FACTURA_FK FOREIGN KEY (ID_FACTURA_FK) REFERENCES HUELLITAS_FACTURACIONES_TB(ID_FACTURA_PK),
    CONSTRAINT HUELLITAS_DETALLE_FACTURA_PRODUCTO_FK FOREIGN KEY (ID_PRODUCTO_FK) REFERENCES HUELLITAS_PRODUCTOS_TB(ID_PRODUCTO_PK),
    CONSTRAINT HUELLITAS_FACTURA_PRODUCTOS_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES HUELLITAS_ESTADO_TB(ID_ESTADO_PK)
);
/
-- Creacion tabla HUELLITAS_ORDEN_COMPRA_TB
CREATE TABLE HUELLITAS_ORDEN_COMPRA_TB (
    ID_ORDEN_COMPRA_PK INT NOT NULL AUTO_INCREMENT,
    ID_PROVEEDOR_FK INT NOT NULL,
    ID_ESTADO_FK INT NOT NULL,
    ORDEN_COMPRA_FECHA DATE NOT NULL,
    ORDEN_COMPRA_PRECIO_TOTAL INT NOT NULL,
    CONSTRAINT HUELLITAS_ORDEN_COMPRA_PK PRIMARY KEY (ID_ORDEN_COMPRA_PK),
    CONSTRAINT HUELLITAS_ORDEN_COMPRA_PROVEEDOR_FK FOREIGN KEY (ID_PROVEEDOR_FK) REFERENCES HUELLITAS_PROVEEDORES_TB(ID_PROVEEDOR_PK),
    CONSTRAINT HUELLITAS_ORDEN_COMPRA_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES HUELLITAS_ESTADO_TB(ID_ESTADO_PK)
);
/
-- Creacion tabla HUELLITAS_ORDEN_PRODUCTOS_TB
CREATE TABLE HUELLITAS_ORDEN_PRODUCTOS_TB (
    ID_ORDEN_COMPRA_FK INT NOT NULL,
    ID_PRODUCTO_FK INT NOT NULL,
    ID_ESTADO_FK INT NOT NULL,
    ORDEN_PRODUCTO_CANTIDAD INT NOT NULL,
    ORDEN_PRODUCTO_PRECIO_UNITARIO INT NOT NULL,
    ORDEN_PRODUCTO_SUBTOTAL INT NOT NULL,
    CONSTRAINT HUELLITAS_ORDEN_PRODUCTOS_PK PRIMARY KEY (ID_ORDEN_COMPRA_FK, ID_PRODUCTO_FK),
    CONSTRAINT HUELLITAS_ORDEN_PRODUCTOS_ORDEN_FK FOREIGN KEY (ID_ORDEN_COMPRA_FK) REFERENCES HUELLITAS_ORDEN_COMPRA_TB(ID_ORDEN_COMPRA_PK),
    CONSTRAINT HUELLITAS_ORDEN_PRODUCTOS_PRODUCTO_FK FOREIGN KEY (ID_PRODUCTO_FK) REFERENCES HUELLITAS_PRODUCTOS_TB(ID_PRODUCTO_PK),
    CONSTRAINT HUELLITAS_ORDEN_PRODUCTOS_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES HUELLITAS_ESTADO_TB(ID_ESTADO_PK)
);
/

-- Creacion tabla HUELLITAS_REGISTRO_CIRUGIAS_TB
CREATE TABLE HUELLITAS_REGISTRO_CIRUGIAS_TB (
    ID_CIRUGIA_PK INT NOT NULL,
    CIRUGIA_FECHA_INICIO DATE NOT NULL,
    CIRUGIA_FECHA_FINAL DATE NOT NULL,
    ID_ESTADO_FK INT NOT NULL,
    ID_MASCOTA_FK INT NOT NULL,
    CIRUGIA_ANOTACIONES VARCHAR(1000),
    CONSTRAINT HUELLITAS_REGISTRO_CIRUGIAS_PK PRIMARY KEY (ID_CIRUGIA_PK),
    CONSTRAINT HUELLITAS_REGISTRO_CIRUGIAS_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES HUELLITAS_ESTADO_TB(ID_ESTADO_PK),
    CONSTRAINT HUELLITAS_REGISTRO_CIRUGIAS_MASCOTA_FK FOREIGN KEY (ID_MASCOTA_FK) REFERENCES HUELLITAS_MASCOTA_TB(ID_MASCOTA_PK)
);
/

-- Creacion tabla HUELLITAS_CIRUGIAS_PERSONAL_TB
CREATE TABLE HUELLITAS_CIRUGIAS_PERSONAL_TB (
    ID_CIRUGIA_FK INT NOT NULL,
    ID_USUARIO_FK INT NOT NULL,
    ID_ESTADO_FK INT NOT NULL,
    ANOTACIONES_ADICIONALES VARCHAR(50),
    CONSTRAINT HUELLITAS_CIRUGIAS_PERSONAL_PK PRIMARY KEY (ID_CIRUGIA_FK, ID_USUARIO_FK),
    CONSTRAINT HUELLITAS_CIRUGIAS_PERSONAL_USUARIO_FK FOREIGN KEY (ID_USUARIO_FK) REFERENCES HUELLITAS_USUARIOS_TB(ID_USUARIO_PK),
    CONSTRAINT HUELLITAS_CIRUGIAS_PERSONAL_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES HUELLITAS_ESTADO_TB(ID_ESTADO_PK)
);
/
-- Creacion tabla HUELLITAS_HISTORIALES_MEDICOS_TB
CREATE TABLE HUELLITAS_HISTORIALES_MEDICOS_TB (
    ID_MASCOTA_FK int NOT NULL,
    ID_CONSULTA_FK int NOT NULL,
    ID_USUARIO_FK INT,
    ID_ESTADO_FK INT NOT NULL,
    HISTORIAL_FECHA_REGISTRO DATE NOT NULL,
    HISTORIAL_DIAGNOSTICO VARCHAR(1000),
    HISTORIAL_TRATAMIENTO VARCHAR(1000),
    HISTORIAL_NOTAS VARCHAR(1000),
    CONSTRAINT HUELLITAS_HISTORIALES_MEDICOS_PK PRIMARY KEY (ID_MASCOTA_FK, ID_CONSULTA_FK),
    CONSTRAINT HUELLITAS_HISTORIALES_MEDICOS_MASCOTA_FK FOREIGN KEY (ID_MASCOTA_FK) REFERENCES HUELLITAS_MASCOTA_TB(ID_MASCOTA_PK),
    CONSTRAINT HUELLITAS_HISTORIALES_MEDICOS_CONSULTA_FK FOREIGN KEY (ID_CONSULTA_FK) REFERENCES HUELLITAS_CONSULTAS_TB(ID_CONSULTA_PK),
    CONSTRAINT HUELLITAS_HISTORIALES_MEDICOS_USUARIO_FK FOREIGN KEY (ID_USUARIO_FK) REFERENCES HUELLITAS_USUARIOS_TB(ID_USUARIO_PK),
    CONSTRAINT HUELLITAS_HISTORIALES_MEDICOS_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES HUELLITAS_ESTADO_TB(ID_ESTADO_PK)
);

-- Creacion tabla HUELLITAS_HISTORIALES_MEDICOS_TB
CREATE TABLE HUELLITAS_BANNER_TB (
    ID_BANNER_PK int NOT NULL AUTO_INCREMENT,
    ID_ESTADO_FK INT NOT NULL,
    BANNER_TEXTO VARCHAR(10000),
    CONSTRAINT HUELLITAS_BANNER_PK PRIMARY KEY (ID_BANNER_PK),
    CONSTRAINT HUELLITAS_BANNER_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES HUELLITAS_ESTADO_TB(ID_ESTADO_PK)
);



-- Agregado por David
-- Procedimiento Almacenado para listar los usuarios
DELIMITER //

CREATE PROCEDURE HUELLITAS_LISTAR_USUARIO_SP()
BEGIN
    SELECT u.ID_USUARIO_PK, u.USUARIO_NOMBRE, u.USUARIO_CORREO,
           r.DESCRIPCION_ROL_USUARIO AS ROL, e.ESTADO_DESCRIPCION AS ESTADO
    FROM HUELLITAS_USUARIOS_TB u
    INNER JOIN HUELLITAS_ROL_USUARIO_TB r ON u.ID_ROL_USUARIO_FK = r.ID_ROL_USUARIO_PK
    INNER JOIN HUELLITAS_ESTADO_TB e ON u.ID_ESTADO_FK = e.ID_ESTADO_PK
    ORDER BY u.ID_USUARIO_PK;
END//

DELIMITER ;


-- Agregado por David
-- Procedimiento Almacenado para listar los roles
DELIMITER //

CREATE PROCEDURE HUELLITAS_LISTAR_ROLES_SP()
BEGIN
    SELECT 
        R.ID_ROL_USUARIO_PK,
        R.DESCRIPCION_ROL_USUARIO,
        E.ESTADO_DESCRIPCION AS ESTADO
    FROM HUELLITAS_ROL_USUARIO_TB R
    JOIN HUELLITAS_ESTADO_TB E ON R.ID_ESTADO_FK = E.ID_ESTADO_PK
    ORDER BY R.ID_ROL_USUARIO_PK;
END//

DELIMITER ;

-- Agregado por David
-- Procedimiento Almacenado para listar los proveedores
DELIMITER //

CREATE PROCEDURE HUELLITAS_LISTAR_PROVEEDORES_SP()
BEGIN
    SELECT 
        P.ID_PROVEEDOR_PK,
        P.PROVEEDOR_NOMBRE,
        P.NOMBRE_REPRESENTANTE,
        P.PROVEEDOR_CORREO,
        P.PROVEEDOR_DESCRIPCION_PRODUCTOS,
        D.DIRECCION_SENNAS,
        E.ESTADO_DESCRIPCION AS ESTADO,
        TC.TELEFONO_CONTACTO AS TELEFONO_CONTACTO
    FROM HUELLITAS_PROVEEDORES_TB P
    LEFT JOIN HUELLITAS_DIRECCION_TB D ON P.ID_DIRECCION_FK = D.ID_DIRECCION_PK
    LEFT JOIN HUELLITAS_TELEFONO_CONTACTO_TB TC ON P.ID_TELEFONO_CONTACTO_FK = TC.ID_TELEFONO_CONTACTO_PK
    JOIN HUELLITAS_ESTADO_TB E ON P.ID_ESTADO_FK = E.ID_ESTADO_PK
    ORDER BY P.ID_PROVEEDOR_PK;
END//

DELIMITER ;


-- Agregado por David
-- Procedimiento Almacenado para listar los productos.
DELIMITER //

CREATE PROCEDURE HUELLITAS_LISTAR_PRODUCTOS_SP()
BEGIN
    SELECT 
        P.ID_PRODUCTO_PK,
        P.PRODUCTO_NOMBRE,
        P.PRODUCTO_DESCRIPCION,
        P.PRODUCTO_PRECIO_UNITARIO,
        P.PRODUCTO_STOCK,
        P.IMAGEN_URL,
        P.FECHA_CREACION,

        -- Relaciones
        E.ESTADO_DESCRIPCION AS ESTADO,
        PR.PROVEEDOR_NOMBRE AS PROVEEDOR,
        C.DESCRIPCION_CATEGORIA AS CATEGORIA,
        M.NOMBRE_MARCA AS MARCA,
        N.NUEVO_DESCRIPCION AS CONDICION

    FROM 
        HUELLITAS_PRODUCTOS_TB P
        INNER JOIN HUELLITAS_ESTADO_TB E 
            ON P.ID_ESTADO_FK = E.ID_ESTADO_PK
        INNER JOIN HUELLITAS_PROVEEDORES_TB PR 
            ON P.ID_PROVEEDOR_FK = PR.ID_PROVEEDOR_PK
        INNER JOIN HUELLITAS_PRODUCTOS_CATEGORIA_TB C 
            ON P.ID_CATEGORIA_FK = C.ID_CATEGORIA_PK
        INNER JOIN HUELLITAS_MARCAS_TB M 
            ON P.ID_MARCA_FK = M.ID_MARCA_PK
        INNER JOIN HUELLITAS_NUEVO_TB N 
            ON P.ID_NUEVO_FK = N.ID_NUEVO_PK

    ORDER BY 
        P.FECHA_CREACION DESC;
END//

DELIMITER ;


-- Agregado por David
-- Procedimiento Almacenado para Actualizar los productos.
DELIMITER $$

CREATE PROCEDURE HUELLITAS_ACTUALIZAR_PRODUCTO_SP (
    IN p_id_producto INT,
    IN p_id_proveedor INT,
    IN p_id_estado INT,
    IN p_id_categoria INT,
    IN p_id_marca INT,
    IN p_id_nuevo INT,
    IN p_nombre VARCHAR(100),
    IN p_descripcion VARCHAR(200),
    IN p_precio DECIMAL(10,2),
    IN p_stock INT,
    IN p_imagen_url VARCHAR(255)
)
BEGIN
    UPDATE HUELLITAS_PRODUCTOS_TB
    SET 
        ID_PROVEEDOR_FK = p_id_proveedor,
        ID_ESTADO_FK = p_id_estado,
        ID_CATEGORIA_FK = p_id_categoria,
        ID_MARCA_FK = p_id_marca,
        ID_NUEVO_FK = p_id_nuevo,
        PRODUCTO_NOMBRE = p_nombre,
        PRODUCTO_DESCRIPCION = p_descripcion,
        PRODUCTO_PRECIO_UNITARIO = p_precio,
        PRODUCTO_STOCK = p_stock,
        IMAGEN_URL = p_imagen_url
    WHERE ID_PRODUCTO_PK = p_id_producto;
END$$

DELIMITER ;


-- Agregado por David
-- Procedimiento Almacenado para Agregar Productos Nuevos
DELIMITER $$

CREATE PROCEDURE HUELLITAS_AGREGAR_PRODUCTO_SP (
    IN p_id_proveedor INT,
    IN p_id_estado INT,
    IN p_id_categoria INT,
    IN p_id_marca INT,
    IN p_id_nuevo INT,
    IN p_nombre VARCHAR(100),
    IN p_descripcion VARCHAR(200),
    IN p_precio DECIMAL(10,2),
    IN p_stock INT,
    IN p_imagen_url VARCHAR(255)
)
BEGIN
    INSERT INTO HUELLITAS_PRODUCTOS_TB (
        ID_PROVEEDOR_FK,
        ID_ESTADO_FK,
        ID_CATEGORIA_FK,
        ID_MARCA_FK,
        ID_NUEVO_FK,
        PRODUCTO_NOMBRE,
        PRODUCTO_DESCRIPCION,
        PRODUCTO_PRECIO_UNITARIO,
        PRODUCTO_STOCK,
        IMAGEN_URL
    )
    VALUES (
        p_id_proveedor,
        p_id_estado,
        p_id_categoria,
        p_id_marca,
        p_id_nuevo,
        p_nombre,
        p_descripcion,
        p_precio,
        p_stock,
        p_imagen_url
    );
END $$

DELIMITER ;

SHOW TRIGGERS LIKE 'HUELLITAS_PRODUCTOS_TB';



-- Agregado por David
-- Procedimiento Almacenado para listar los slider banners.
DELIMITER //

CREATE PROCEDURE HUELLITAS_LISTAR_SLIDER_BANNER_SP()
BEGIN
    SELECT 
        sb.ID_SLIDER_BANNER_PK,
        sb.IMAGEN_URL,
        sb.DESCRIPCION_SLIDER_BANNER,
        e.ESTADO_DESCRIPCION AS ESTADO
    FROM 
        HUELLITAS_SLIDER_BANNER_TB sb
    INNER JOIN 
        HUELLITAS_ESTADO_TB e ON sb.ID_ESTADO_FK = e.ID_ESTADO_PK
    ORDER BY 
        sb.ID_SLIDER_BANNER_PK;
END//

DELIMITER ;

-- Agregado por David
-- Procedimiento Almacenado para listar los banners "activos"
DELIMITER $$

CREATE PROCEDURE HUELLITAS_LISTAR_SLIDER_BANNER_ACTIVOS_SP()
BEGIN
    SELECT 
        ID_SLIDER_BANNER_PK,
        IMAGEN_URL,
        DESCRIPCION_SLIDER_BANNER
    FROM HUELLITAS_SLIDER_BANNER_TB
    WHERE ID_ESTADO_FK = 1; -- solo activos
END $$

DELIMITER ;



-- Agregado por David
-- Procedimiento Almacenado para Insertar nuevos proveedores
DELIMITER //

CREATE PROCEDURE HUELLITAS_AGREGAR_PROVEEDOR_SP(
    IN p_proveedor_nombre VARCHAR(100),
    IN p_nombre_representante VARCHAR(100),
    IN p_proveedor_correo VARCHAR(100),
    IN p_id_estado_fk INT,
    IN p_telefono_contacto INT
)
BEGIN
    DECLARE v_id_telefono_fk INT;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Error: No se pudo agregar el proveedor. Se revirtieron los cambios.';
    END;

    START TRANSACTION;

    INSERT INTO HUELLITAS_TELEFONO_CONTACTO_TB (TELEFONO_CONTACTO, ID_ESTADO_FK)
    VALUES (p_telefono_contacto, p_id_estado_fk);

    SET v_id_telefono_fk = LAST_INSERT_ID();

    INSERT INTO HUELLITAS_PROVEEDORES_TB 
        (PROVEEDOR_NOMBRE, NOMBRE_REPRESENTANTE, PROVEEDOR_CORREO, ID_ESTADO_FK, ID_TELEFONO_CONTACTO_FK)
    VALUES 
        (p_proveedor_nombre, p_nombre_representante, p_proveedor_correo, p_id_estado_fk, v_id_telefono_fk);

    COMMIT;

END //

DELIMITER ;

-- Agregado por David
-- Procedimiento Almacenado para Actualizar la tabla de proveedores
DELIMITER //
CREATE PROCEDURE HUELLITAS_ACTUALIZAR_PROVEEDOR_SP(
    IN P_ID_PROVEEDOR_PK INT,
    IN P_PROVEEDOR_NOMBRE VARCHAR(100),
    IN P_NOMBRE_REPRESENTANTE VARCHAR(100),
    IN P_PROVEEDOR_CORREO VARCHAR(100),
    IN P_ID_ESTADO_FK INT,
    IN P_TELEFONO_CONTACTO VARCHAR(20),
    IN P_DIRECCION_SENNAS VARCHAR(255)
)
BEGIN
    DECLARE V_ID_TELEFONO INT;
    DECLARE V_ID_DIRECCION INT;

    -- Validar que el proveedor exista
    IF (SELECT COUNT(*) FROM HUELLITAS_PROVEEDORES_TB WHERE ID_PROVEEDOR_PK = P_ID_PROVEEDOR_PK) = 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'ERROR: EL PROVEEDOR NO EXISTE';
    END IF;

    -- Obtener llaves actuales de teléfono y dirección
    SELECT ID_TELEFONO_CONTACTO_FK, ID_DIRECCION_FK
    INTO V_ID_TELEFONO, V_ID_DIRECCION
    FROM HUELLITAS_PROVEEDORES_TB
    WHERE ID_PROVEEDOR_PK = P_ID_PROVEEDOR_PK;

    -- Actualizar teléfono si existe
    IF V_ID_TELEFONO IS NOT NULL THEN
        UPDATE HUELLITAS_TELEFONO_CONTACTO_TB
        SET TELEFONO_CONTACTO = P_TELEFONO_CONTACTO
        WHERE ID_TELEFONO_CONTACTO_PK = V_ID_TELEFONO;
    END IF;

    -- Actualizar dirección si existe
    IF V_ID_DIRECCION IS NOT NULL THEN
        UPDATE HUELLITAS_DIRECCION_TB
        SET DIRECCION_SENNAS = P_DIRECCION_SENNAS
        WHERE ID_DIRECCION_PK = V_ID_DIRECCION;
    END IF;

    -- Actualizar proveedor
    UPDATE HUELLITAS_PROVEEDORES_TB
    SET 
        PROVEEDOR_NOMBRE = P_PROVEEDOR_NOMBRE,
        NOMBRE_REPRESENTANTE = P_NOMBRE_REPRESENTANTE,
        PROVEEDOR_CORREO = P_PROVEEDOR_CORREO,
        ID_ESTADO_FK = P_ID_ESTADO_FK
    WHERE ID_PROVEEDOR_PK = P_ID_PROVEEDOR_PK;

    SELECT '✅ PROVEEDOR ACTUALIZADO CORRECTAMENTE' AS MENSAJE;
END//
DELIMITER ;






-- Agregado por David
-- Procedimiento Almacenado para Recuperar contraseña
DELIMITER //

CREATE PROCEDURE HUELLITAS_RECUPERAR_CONTRASENNA_SP (
IN P_ID_USUARIO INT,
IN P_NUEVA_CONTRASENNA VARCHAR(255)
)
BEGIN
DECLARE V_EXISTE INT;

-- Verificar que el usuario exista y esté activo
SELECT COUNT(*) INTO V_EXISTE
FROM HUELLITAS_USUARIOS_TB
WHERE ID_USUARIO_PK = P_ID_USUARIO AND ID_ESTADO_FK = 1; -- 1 = Activo

IF V_EXISTE = 0 THEN
    SELECT '❌ ERROR: USUARIO NO ENCONTRADO O INACTIVO' AS MENSAJE;
ELSE
    -- Actualizar la contraseña (el trigger hará la encriptación y la regeneración del salt)
    UPDATE HUELLITAS_USUARIOS_TB
    SET USUARIO_CONTRASENNA = P_NUEVA_CONTRASENNA
    WHERE ID_USUARIO_PK = P_ID_USUARIO;

    SELECT '✅ CONTRASEÑA RECUPERADA EXITOSAMENTE' AS MENSAJE;
END IF;

END//

DELIMITER ;

-- Agregado por David
-- Procedimiento Almacenado para Obtener un usuario por ID
DELIMITER //
CREATE PROCEDURE HUELLITAS_OBTENER_USUARIO_POR_ID_SP(IN p_id_usuario INT)
BEGIN
    SELECT 
        u.ID_USUARIO_PK,
        u.USUARIO_NOMBRE,
        u.USUARIO_CORREO,
        u.USUARIO_IMAGEN_URL,
        u.USUARIO_IDENTIFICACION,
        r.DESCRIPCION_ROL_USUARIO AS ROL,
        t.TELEFONO_CONTACTO,
        d.DIRECCION_SENNAS,
        p.NOMBRE_PROVINCIA,
        c.NOMBRE_CANTON,
        di.NOMBRE_DISTRITO
    FROM HUELLITAS_USUARIOS_TB u
    INNER JOIN HUELLITAS_ROL_USUARIO_TB r ON u.ID_ROL_USUARIO_FK = r.ID_ROL_USUARIO_PK
    LEFT JOIN HUELLITAS_TELEFONO_CONTACTO_TB t ON u.ID_TELEFONO_CONTACTO_FK = t.ID_TELEFONO_CONTACTO_PK
    LEFT JOIN HUELLITAS_DIRECCION_TB d ON u.ID_DIRECCION_FK = d.ID_DIRECCION_PK
    LEFT JOIN HUELLITAS_DIRECCION_PROVINCIA_TB p ON d.ID_DIRECCION_PROVINCIA_FK = p.ID_DIRECCION_PROVINCIA_PK
    LEFT JOIN HUELLITAS_DIRECCION_CANTON_TB c ON d.ID_DIRECCION_CANTON_FK = c.ID_DIRECCION_CANTON_PK
    LEFT JOIN HUELLITAS_DIRECCION_DISTRITO_TB di ON d.ID_DIRECCION_DISTRITO_FK = di.ID_DIRECCION_DISTRITO_PK
    WHERE u.ID_USUARIO_PK = p_id_usuario;
END//

DELIMITER ;



-- Agregado por David
-- Procedimiento Almacenado para ACTUALIZAR_PERFIL_USUARIO
DELIMITER //
CREATE PROCEDURE HUELLITAS_ACTUALIZAR_PERFIL_USUARIO_SP(
    IN P_ID_USUARIO_PK INT,
    IN P_USUARIO_NOMBRE VARCHAR(100),
    IN P_USUARIO_IDENTIFICACION INT,
    IN P_USUARIO_CUENTA_BANCARIA VARCHAR(50),
    IN P_USUARIO_IMAGEN_URL VARCHAR(500),

    IN P_ID_PROVINCIA_FK INT,
    IN P_ID_CANTON_FK INT,
    IN P_ID_DISTRITO_FK INT,
    IN P_DIRECCION_SENNAS VARCHAR(200),

    IN P_TELEFONO_CONTACTO INT
)
BEGIN
    DECLARE V_ID_DIRECCION INT;
    DECLARE V_ID_TELEFONO INT;
    DECLARE V_EXISTE_DIRECCION INT DEFAULT 0;
    DECLARE V_EXISTE_TELEFONO INT DEFAULT 0;
    DECLARE V_ID_ESTADO_ACTIVO INT DEFAULT 1; -- Suponiendo que 1 = ACTIVO

    -- Verificar si el usuario existe
    IF NOT EXISTS (SELECT 1 FROM HUELLITAS_USUARIOS_TB WHERE ID_USUARIO_PK = P_ID_USUARIO_PK) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'El usuario especificado no existe.';
    END IF;

    -- Verificar si ya tiene dirección asociada
    SELECT ID_DIRECCION_FK INTO V_ID_DIRECCION
    FROM HUELLITAS_USUARIOS_TB
    WHERE ID_USUARIO_PK = P_ID_USUARIO_PK;

    -- Si no tiene dirección, se inserta una nueva
    IF V_ID_DIRECCION IS NULL THEN
        INSERT INTO HUELLITAS_DIRECCION_TB (
            ID_ESTADO_FK, 
            ID_DIRECCION_PROVINCIA_FK, 
            ID_DIRECCION_CANTON_FK, 
            ID_DIRECCION_DISTRITO_FK, 
            DIRECCION_SENNAS
        ) VALUES (
            V_ID_ESTADO_ACTIVO, 
            P_ID_PROVINCIA_FK, 
            P_ID_CANTON_FK, 
            P_ID_DISTRITO_FK, 
            P_DIRECCION_SENNAS
        );
        SET V_ID_DIRECCION = LAST_INSERT_ID();
    ELSE
        -- Si ya tiene dirección, la actualizamos
        UPDATE HUELLITAS_DIRECCION_TB
        SET 
            ID_DIRECCION_PROVINCIA_FK = P_ID_PROVINCIA_FK,
            ID_DIRECCION_CANTON_FK = P_ID_CANTON_FK,
            ID_DIRECCION_DISTRITO_FK = P_ID_DISTRITO_FK,
            DIRECCION_SENNAS = P_DIRECCION_SENNAS
        WHERE ID_DIRECCION_PK = V_ID_DIRECCION;
    END IF;

    -- Verificar si ya tiene teléfono asociado
    SELECT ID_TELEFONO_CONTACTO_FK INTO V_ID_TELEFONO
    FROM HUELLITAS_USUARIOS_TB
    WHERE ID_USUARIO_PK = P_ID_USUARIO_PK;

    -- Si no tiene teléfono, insertamos uno nuevo
    IF V_ID_TELEFONO IS NULL THEN
        INSERT INTO HUELLITAS_TELEFONO_CONTACTO_TB (ID_ESTADO_FK, TELEFONO_CONTACTO)
        VALUES (V_ID_ESTADO_ACTIVO, P_TELEFONO_CONTACTO);
        SET V_ID_TELEFONO = LAST_INSERT_ID();
    ELSE
        -- Si ya tiene teléfono, se actualiza
        UPDATE HUELLITAS_TELEFONO_CONTACTO_TB
        SET TELEFONO_CONTACTO = P_TELEFONO_CONTACTO
        WHERE ID_TELEFONO_CONTACTO_PK = V_ID_TELEFONO;
    END IF;

    -- Finalmente, actualizar los datos del usuario
    UPDATE HUELLITAS_USUARIOS_TB
    SET
        USUARIO_NOMBRE = P_USUARIO_NOMBRE,
        USUARIO_IDENTIFICACION = P_USUARIO_IDENTIFICACION,
        USUARIO_CUENTA_BANCARIA = P_USUARIO_CUENTA_BANCARIA,
        USUARIO_IMAGEN_URL = P_USUARIO_IMAGEN_URL,
        ID_DIRECCION_FK = V_ID_DIRECCION,
        ID_TELEFONO_CONTACTO_FK = V_ID_TELEFONO
    WHERE ID_USUARIO_PK = P_ID_USUARIO_PK;

    SELECT 
        'Datos del perfil actualizados correctamente' AS MENSAJE,
        P_ID_USUARIO_PK AS ID_USUARIO,
        V_ID_DIRECCION AS ID_DIRECCION,
        V_ID_TELEFONO AS ID_TELEFONO;
END//
DELIMITER ;

-- TABLA DE DESCUENTOS TEMPORALES

CREATE TABLE HUELLITAS_DESCUENTOS_TB (
    ID_DESCUENTO_PK INT NOT NULL AUTO_INCREMENT,
    ID_PRODUCTO_FK INT NOT NULL,
    ID_ESTADO_FK INT NOT NULL,
    
    -- INFORMACIÓN DEL DESCUENTO
    PORCENTAJE_DESCUENTO DECIMAL(5,2) NOT NULL,
    FECHA_FIN DATE NOT NULL,  -- SOLO FECHA FIN
    FECHA_CREACION DATETIME DEFAULT CURRENT_TIMESTAMP,
    -- CONSTRAINTS
    CONSTRAINT HUELLITAS_DESCUENTOS_PK PRIMARY KEY (ID_DESCUENTO_PK),
    CONSTRAINT HUELLITAS_DESCUENTOS_PRODUCTO_FK FOREIGN KEY (ID_PRODUCTO_FK) REFERENCES HUELLITAS_PRODUCTOS_TB(ID_PRODUCTO_PK),
    CONSTRAINT HUELLITAS_DESCUENTOS_ESTADO_FK FOREIGN KEY (ID_ESTADO_FK) REFERENCES HUELLITAS_ESTADO_TB(ID_ESTADO_PK),
    
    -- VALIDACIONES
    CONSTRAINT CHK_PORCENTAJE_DESCUENTO_RANGO CHECK (PORCENTAJE_DESCUENTO > 0 AND PORCENTAJE_DESCUENTO <= 100),
    CONSTRAINT CHK_FECHA_FIN_FUTURA CHECK (FECHA_FIN >= FECHA_CREACION),
    
    -- ÍNDICES
    INDEX IDX_DESCUENTO_PRODUCTO (ID_PRODUCTO_FK),
    INDEX IDX_DESCUENTO_ESTADO (ID_ESTADO_FK),
    INDEX IDX_DESCUENTO_FECHA_FIN (FECHA_FIN),
    INDEX IDX_DESCUENTO_ACTIVO (ID_ESTADO_FK, FECHA_FIN)
) ENGINE=INNODB DEFAULT CHARSET=UTF8MB4;
/


-- PROCEDIMIENTO PARA CREAR DESCUENTO
DELIMITER //
CREATE PROCEDURE HUELLITAS_CREAR_DESCUENTO_SP(
    IN P_ID_PRODUCTO_FK INT,
    IN P_PORCENTAJE_DESCUENTO DECIMAL(5,2),
    IN P_FECHA_FIN DATE
)
BEGIN
    DECLARE V_PRODUCTO_EXISTE INT;
    
    -- VERIFICAR QUE EL PRODUCTO EXISTA
    SELECT COUNT(*) INTO V_PRODUCTO_EXISTE
    FROM HUELLITAS_PRODUCTOS_TB 
    WHERE ID_PRODUCTO_PK = P_ID_PRODUCTO_FK AND ESTA_ACTIVO = TRUE;
    
    IF V_PRODUCTO_EXISTE = 0 THEN
        SELECT 'ERROR: PRODUCTO NO ENCONTRADO O INACTIVO' AS MENSAJE;
    ELSEIF P_FECHA_FIN < CURDATE() THEN
        SELECT 'ERROR: LA FECHA FIN NO PUEDE SER ANTERIOR A HOY' AS MENSAJE;
    ELSE
        -- INSERTAR NUEVO DESCUENTO (FECHA INICIO IMPLÍCITA = HOY)
        INSERT INTO HUELLITAS_DESCUENTOS_TB (
            ID_PRODUCTO_FK,
            ID_ESTADO_FK,
            PORCENTAJE_DESCUENTO,
            FECHA_FIN
        ) VALUES (
            P_ID_PRODUCTO_FK,
            1, -- ACTIVO
            P_PORCENTAJE_DESCUENTO,
            P_FECHA_FIN
        );
        
        SELECT 
            'DESCUENTO CREADO EXITOSAMENTE' AS MENSAJE,
            LAST_INSERT_ID() AS ID_DESCUENTO_CREADO,
            CURDATE() AS FECHA_INICIO,
            P_FECHA_FIN AS FECHA_FIN;
    END IF;
END//
DELIMITER ;

-- PROCEDIMIENTO PARA DESACTIVAR DESCUENTOS VENCIDOS
DELIMITER //
CREATE PROCEDURE HUELLITAS_DESACTIVAR_DESCUENTOS_VENCIDOS_SP()
BEGIN
    -- DESACTIVAR DESCUENTOS CUYA FECHA_FIN YA PASÓ
    UPDATE HUELLITAS_DESCUENTOS_TB 
    SET ID_ESTADO_FK = 0, -- INACTIVO
        FECHA_ACTUALIZACION = CURRENT_TIMESTAMP
    WHERE ID_ESTADO_FK = 1 -- ACTIVO
    AND FECHA_FIN < CURDATE();
    
    SELECT 
        CONCAT('DESCUENTOS DESACTIVADOS: ', ROW_COUNT()) AS RESULTADO;
END//
DELIMITER ;

-- EVENTO DIARIO PARA LIMPIAR DESCUENTOS VENCIDOS
DELIMITER //
CREATE EVENT IF NOT EXISTS HUELLITAS_LIMPIAR_DESCUENTOS_VENCIDOS_EV
ON SCHEDULE EVERY 1 DAY
STARTS CURRENT_TIMESTAMP
DO
BEGIN
    CALL HUELLITAS_DESACTIVAR_DESCUENTOS_VENCIDOS_SP();
END//
DELIMITER ;

-- PROCEDIMIENTO PARA OBTENER DESCUENTOS ACTIVOS
DELIMITER //
CREATE PROCEDURE HUELLITAS_OBTENER_DESCUENTOS_ACTIVOS_SP(
    IN P_ID_PRODUCTO_FK INT -- NULL PARA TODOS LOS PRODUCTOS
)
BEGIN
    IF P_ID_PRODUCTO_FK IS NULL THEN
        -- OBTENER TODOS LOS DESCUENTOS ACTIVOS
        SELECT 
            D.ID_DESCUENTO_PK,
            P.NOMBRE_PRODUCTO,
            D.PORCENTAJE_DESCUENTO,
            D.FECHA_CREACION AS FECHA_INICIO, -- FECHA CREACIÓN COMO INICIO
            D.FECHA_FIN,
            CASE 
                WHEN D.FECHA_FIN >= CURDATE() THEN 'ACTIVO'
                ELSE 'VENCIDO'
            END AS ESTADO_DESCUENTO,
            DATEDIFF(D.FECHA_FIN, CURDATE()) AS DIAS_RESTANTES
        FROM HUELLITAS_DESCUENTOS_TB D
        JOIN HUELLITAS_PRODUCTOS_TB P ON D.ID_PRODUCTO_FK = P.ID_PRODUCTO_PK
        WHERE D.ID_ESTADO_FK = 1
        AND D.FECHA_FIN >= CURDATE()
        ORDER BY D.FECHA_FIN ASC;
    ELSE
        -- OBTENER DESCUENTOS DE UN PRODUCTO ESPECÍFICO
        SELECT 
            D.ID_DESCUENTO_PK,
            P.NOMBRE_PRODUCTO,
            D.PORCENTAJE_DESCUENTO,
            D.FECHA_CREACION AS FECHA_INICIO,
            D.FECHA_FIN,
            CASE 
                WHEN D.FECHA_FIN >= CURDATE() THEN 'ACTIVO'
                ELSE 'VENCIDO'
            END AS ESTADO_DESCUENTO,
            DATEDIFF(D.FECHA_FIN, CURDATE()) AS DIAS_RESTANTES
        FROM HUELLITAS_DESCUENTOS_TB D
        JOIN HUELLITAS_PRODUCTOS_TB P ON D.ID_PRODUCTO_FK = P.ID_PRODUCTO_PK
        WHERE D.ID_PRODUCTO_FK = P_ID_PRODUCTO_FK
        AND D.ID_ESTADO_FK = 1
        AND D.FECHA_FIN >= CURDATE()
        ORDER BY D.FECHA_FIN ASC;
    END IF;
END//
DELIMITER ;

-- FUNCIÓN PARA CALCULAR PRECIO CON DESCUENTO
DELIMITER //
CREATE FUNCTION HUELLITAS_CALCULAR_PRECIO_CON_DESCUENTO_FN(
    P_ID_PRODUCTO_FK INT,
    P_PRECIO_ORIGINAL DECIMAL(10,2)
)
RETURNS DECIMAL(10,2)
DETERMINISTIC
READS SQL DATA
BEGIN
    DECLARE V_PORCENTAJE_DESCUENTO DECIMAL(5,2);
    DECLARE V_PRECIO_FINAL DECIMAL(10,2);
    
    -- OBTENER DESCUENTO ACTIVO MÁS RECIENTE (VÁLIDO SI FECHA_FIN >= HOY)
    SELECT PORCENTAJE_DESCUENTO INTO V_PORCENTAJE_DESCUENTO
    FROM HUELLITAS_DESCUENTOS_TB 
    WHERE ID_PRODUCTO_FK = P_ID_PRODUCTO_FK
    AND ID_ESTADO_FK = 1
    AND FECHA_FIN >= CURDATE()  -- DESCUENTO VIGENTE
    ORDER BY FECHA_CREACION DESC
    LIMIT 1;
    
    -- CALCULAR PRECIO FINAL
    IF V_PORCENTAJE_DESCUENTO IS NOT NULL THEN
        SET V_PRECIO_FINAL = P_PRECIO_ORIGINAL * (1 - (V_PORCENTAJE_DESCUENTO / 100));
    ELSE
        SET V_PRECIO_FINAL = P_PRECIO_ORIGINAL;
    END IF;
    
    RETURN V_PRECIO_FINAL;
END//
DELIMITER ;


-- VISTA DE DESCUENTOS VIGENTES
CREATE VIEW HUELLITAS_DESCUENTOS_VIGENTES_VW AS
SELECT 
    D.ID_DESCUENTO_PK,
    P.ID_PRODUCTO_PK,
    P.PRODUCTO_NOMBRE,
    P.PRODUCTO_PRECIO_UNITARIO AS PRECIO_ORIGINAL,
    D.PORCENTAJE_DESCUENTO,
    HUELLITAS_CALCULAR_PRECIO_CON_DESCUENTO_FN(P.ID_PRODUCTO_PK, P.PRODUCTO_PRECIO_UNITARIO) AS PRECIO_CON_DESCUENTO,
    D.FECHA_CREACION AS FECHA_INICIO,  -- FECHA CREACIÓN COMO INICIO
    D.FECHA_FIN,
    DATEDIFF(D.FECHA_FIN, CURDATE()) AS DIAS_RESTANTES,
    CASE 
        WHEN D.FECHA_FIN >= CURDATE() THEN 'ACTIVO'
        ELSE 'VENCIDO'
    END AS ESTADO
FROM HUELLITAS_DESCUENTOS_TB D
JOIN HUELLITAS_PRODUCTOS_TB P ON D.ID_PRODUCTO_FK = P.ID_PRODUCTO_PK
WHERE D.ID_ESTADO_FK = 1
AND D.FECHA_FIN >= CURDATE();


-- ==========================================
-- INSERTAR NUEVA CATEGORÍA
-- ==========================================
DELIMITER //
CREATE PROCEDURE HUELLITAS_AGREGAR_CATEGORIA_SP (
    IN p_id_estado_fk INT,
    IN p_descripcion_categoria VARCHAR(100)
)
BEGIN
    INSERT INTO HUELLITAS_PRODUCTOS_CATEGORIA_TB (ID_ESTADO_FK, DESCRIPCION_CATEGORIA)
    VALUES (p_id_estado_fk, p_descripcion_categoria);
END //
DELIMITER ;

-- ==========================================
-- LISTAR TODAS LAS CATEGORÍAS
-- ==========================================
DELIMITER //
CREATE PROCEDURE HUELLITAS_LISTAR_CATEGORIAS_SP ()
BEGIN
    SELECT 
        c.ID_CATEGORIA_PK,
        c.DESCRIPCION_CATEGORIA,
        e.ESTADO_DESCRIPCION AS ESTADO
    FROM HUELLITAS_PRODUCTOS_CATEGORIA_TB c
    INNER JOIN HUELLITAS_ESTADO_TB e ON e.ID_ESTADO_PK = c.ID_ESTADO_FK
    ORDER BY c.ID_CATEGORIA_PK ASC;
END //
DELIMITER ;

-- ==========================================
-- ACTUALIZAR UNA CATEGORÍA
-- ==========================================
DELIMITER //
CREATE PROCEDURE HUELLITAS_ACTUALIZAR_CATEGORIA_SP (
    IN p_id_categoria_pk INT,
    IN p_id_estado_fk INT,
    IN p_descripcion_categoria VARCHAR(100)
)
BEGIN
    UPDATE HUELLITAS_PRODUCTOS_CATEGORIA_TB
    SET 
        ID_ESTADO_FK = p_id_estado_fk,
        DESCRIPCION_CATEGORIA = p_descripcion_categoria
    WHERE ID_CATEGORIA_PK = p_id_categoria_pk;
END //
DELIMITER ;



-- ==========================================
-- INSERTAR NUEVA MARCA
-- ==========================================
DELIMITER //
CREATE PROCEDURE HUELLITAS_AGREGAR_MARCA_SP (
    IN p_nombre_marca VARCHAR(100),
    IN p_id_estado_fk INT,
    IN p_marca_imagen_url VARCHAR(500)
)
BEGIN
    INSERT INTO HUELLITAS_MARCAS_TB (NOMBRE_MARCA, ID_ESTADO_FK, MARCA_IMAGEN_URL)
    VALUES (p_nombre_marca, p_id_estado_fk, p_marca_imagen_url);
END //
DELIMITER ;

-- ==========================================
-- LISTAR TODAS LAS MARCAS
-- ==========================================
DELIMITER //
CREATE PROCEDURE HUELLITAS_LISTAR_MARCAS_SP ()
BEGIN
    SELECT 
        m.ID_MARCA_PK,
        m.NOMBRE_MARCA,
        m.MARCA_IMAGEN_URL,
        e.ESTADO_DESCRIPCION AS ESTADO
    FROM HUELLITAS_MARCAS_TB m
    INNER JOIN HUELLITAS_ESTADO_TB e ON e.ID_ESTADO_PK = m.ID_ESTADO_FK
    ORDER BY m.ID_MARCA_PK ASC;
END //
DELIMITER ;

-- ==========================================
-- ACTUALIZAR UNA MARCA
-- ==========================================
DELIMITER //
CREATE PROCEDURE HUELLITAS_ACTUALIZAR_MARCA_SP (
    IN p_id_marca_pk INT,
    IN p_nombre_marca VARCHAR(100),
    IN p_id_estado_fk INT,
    IN p_marca_imagen_url VARCHAR(500)
)
BEGIN
    UPDATE HUELLITAS_MARCAS_TB
    SET 
        NOMBRE_MARCA = p_nombre_marca,
        ID_ESTADO_FK = p_id_estado_fk,
        MARCA_IMAGEN_URL = p_marca_imagen_url
    WHERE ID_MARCA_PK = p_id_marca_pk;
END //
DELIMITER ;


