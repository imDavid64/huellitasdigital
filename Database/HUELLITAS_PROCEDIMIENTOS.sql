-- ==========================================
-- Orden de creacion de tablas para la base de datos HUELLITAS
-- 1 HUELLITAS_TABLAS.sql
-- 2 HUELLITAS_FUNCIONES.sql
-- 3 HUELLITAS_TRIGGERS.sql
-- 4 HUELLITAS_PROCEDIMIENTOS.sql
-- 5 HUELLITAS_VISTAS.sql
-- 6 HUELLITAS_PRUEBAS.sql
-- ==========================================
use HUELLITASDIGITAL;
-- ==========================================
-- NOMBRE: HUELLITAS_LISTAR_ESTADO_ACTIVO_INACTIVO_SP
-- DESCRIPCIÓN: Procedimiento para listar solo los estado de "Activo" e "Inactivo"
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_LISTAR_ESTADO_ACTIVO_INACTIVO_SP;
DELIMITER $$
CREATE PROCEDURE HUELLITAS_LISTAR_ESTADO_ACTIVO_INACTIVO_SP()
BEGIN
    SELECT 
        ID_ESTADO_PK,
        ESTADO_DESCRIPCION
    FROM huellitas_estado_tb
    WHERE ESTADO_DESCRIPCION IN ('Activo', 'Inactivo')
    ORDER BY ESTADO_DESCRIPCION ASC;
END$$
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_LISTAR_NUEVO_SP
-- DESCRIPCIÓN: Procedimiento para listar los estado de un producto
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_LISTAR_NUEVO_SP;
DELIMITER $$
CREATE PROCEDURE HUELLITAS_LISTAR_NUEVO_SP()
BEGIN
    SELECT 
        ID_NUEVO_PK,
        NUEVO_DESCRIPCION
    FROM HUELLITAS_NUEVO_TB
    ORDER BY ID_NUEVO_PK ASC;
END$$
DELIMITER ;


-- ==========================================
-- NOMBRE: HUELLITAS_CAMBIAR_CONTRASENNA_SP
-- DESCRIPCIÓN: Procedimiento para cambiar la contraseña de un usuario verificando la actual
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_CAMBIAR_CONTRASENNA_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_CAMBIAR_CONTRASENNA_SP(
    IN P_USUARIO_ID INT,
    IN P_CONTRASENNA_ACTUAL VARCHAR(255),
    IN P_CONTRASENNA_NUEVA VARCHAR(255)
)
BEGIN
    DECLARE V_CONTRASENNA_VALIDA BOOLEAN;
    DECLARE V_SALT_ANTERIOR VARCHAR(100);
    
    -- VERIFICAR CONTRASEÑA ACTUAL
    SET V_CONTRASENNA_VALIDA = HUELLITAS_VERIFICAR_CONTRASENNA_FN(P_USUARIO_ID, P_CONTRASENNA_ACTUAL);
    
    IF V_CONTRASENNA_VALIDA THEN
        -- OBTENER SALT ANTERIOR (PARA DEPURACIÓN)
        SELECT USUARIO_SALT 
        INTO V_SALT_ANTERIOR 
        FROM huellitas_usuarios_tb 
        WHERE ID_USUARIO_PK = P_USUARIO_ID;
        
        -- ACTUALIZAR CONTRASEÑA (EL TRIGGER SE ENCARGA DE LA ENCRIPTACIÓN)
        UPDATE huellitas_usuarios_tb 
        SET USUARIO_CONTRASENNA = P_CONTRASENNA_NUEVA
        WHERE ID_USUARIO_PK = P_USUARIO_ID;
        
        SELECT 
            'CONTRASEÑA ACTUALIZADA EXITOSAMENTE' AS MENSAJE,
            CONCAT('SALT ANTERIOR: ', V_SALT_ANTERIOR) AS DEBUG_INFO;
    ELSE
        SELECT 'ERROR: CONTRASEÑA ACTUAL INCORRECTA' AS MENSAJE;
    END IF;
END//
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_VALIDAR_LOGIN_SP
-- DESCRIPCIÓN: Procedimiento para validar el login de usuario con verificación de estado
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_VALIDAR_LOGIN_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_VALIDAR_LOGIN_SP(
    IN P_USUARIO_CORREO VARCHAR(100),
    IN P_CONTRASENNA_INTENTO VARCHAR(255)
)
BEGIN
    DECLARE V_USUARIO_ID INT;
    DECLARE V_CONTRASENNA_VALIDA BOOLEAN;
    DECLARE V_ID_ESTADO_FK INT;
    
    -- OBTENER DATOS DEL USUARIO
    SELECT 
        ID_USUARIO_PK, 
        ID_ESTADO_FK
    INTO 
        V_USUARIO_ID, 
        V_ID_ESTADO_FK
    FROM huellitas_usuarios_tb 
    WHERE USUARIO_CORREO = P_USUARIO_CORREO;
    
    IF V_USUARIO_ID IS NULL THEN
        SELECT 'ERROR: USUARIO NO ENCONTRADO' AS MENSAJE, FALSE AS LOGIN_EXITOSO;
        
    ELSEIF V_ID_ESTADO_FK != 1 THEN  -- 1 = ACTIVO
        SELECT 'ERROR: USUARIO INACTIVO' AS MENSAJE, FALSE AS LOGIN_EXITOSO;
        
    ELSE
        -- VERIFICAR CONTRASEÑA
        SET V_CONTRASENNA_VALIDA = HUELLITAS_VERIFICAR_CONTRASENNA_FN(V_USUARIO_ID, P_CONTRASENNA_INTENTO);
        
        IF V_CONTRASENNA_VALIDA THEN
            -- ACTUALIZAR ÚLTIMO LOGIN
            UPDATE huellitas_usuarios_tb 
            SET USUARIO_ULTIMO_LOGIN = NOW()
            WHERE ID_USUARIO_PK = V_USUARIO_ID;
            
            -- RETORNAR DATOS DEL USUARIO LOGUEADO
            SELECT
                'LOGIN EXITOSO' AS MENSAJE,
                TRUE AS LOGIN_EXITOSO,
                U.ID_USUARIO_PK AS ID_USUARIO,
                U.USUARIO_NOMBRE,
                U.USUARIO_CORREO,
                R.DESCRIPCION_ROL_USUARIO AS ROL
            FROM huellitas_usuarios_tb U
            INNER JOIN huellitas_rol_usuario_tb R 
                ON U.ID_ROL_USUARIO_FK = R.ID_ROL_USUARIO_PK
            WHERE U.ID_USUARIO_PK = V_USUARIO_ID;
                
        ELSE
            SELECT 'ERROR: CONTRASEÑA INCORRECTA' AS MENSAJE, FALSE AS LOGIN_EXITOSO;
        END IF;
    END IF;
END//
DELIMITER ;


-- ==========================================
-- NOMBRE: HUELLITAS_INICIALIZAR_CLAVE_ENCRIPTACION_SP
-- DESCRIPCIÓN: Procedimiento para inicializar claves de encriptación si no existen
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_INICIALIZAR_CLAVE_ENCRIPTACION_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_INICIALIZAR_CLAVE_ENCRIPTACION_SP(
    IN P_NOMBRE_CLAVE VARCHAR(100)
)
BEGIN
    DECLARE V_CLAVE_EXISTENTE INT;
    
    SELECT COUNT(*) INTO V_CLAVE_EXISTENTE 
    FROM huellitas_claves_encriptacion_tb 
    WHERE NOMBRE_CLAVE = P_NOMBRE_CLAVE AND ESTA_ACTIVA = TRUE;
    
    IF V_CLAVE_EXISTENTE = 0 THEN
        INSERT INTO huellitas_claves_encriptacion_tb (NOMBRE_CLAVE, CLAVE_ENCRIPTACION, VERSION_CLAVE)
        VALUES (P_NOMBRE_CLAVE, HUELLITAS_GENERAR_CLAVE_AES_FN(), 1);
    END IF;
END//
DELIMITER ;


-- ==========================================
-- NOMBRE: HUELLITAS_OBTENER_TARJETAS_USUARIO_SP
-- DESCRIPCIÓN: Procedimiento para obtener las tarjetas de un usuario de forma segura
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_OBTENER_TARJETAS_USUARIO_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_OBTENER_TARJETAS_USUARIO_SP(
    IN P_ID_USUARIO_FK INT
)
BEGIN
    SELECT 
        ID_TARJETA_PK, 
        TIPO_TARJETA, 
        MARCA_TARJETA, 
        NOMBRE_TITULAR,
        ULTIMOS_CUATRO_DIGITOS, 
        DATE_FORMAT(FECHA_VENCIMIENTO, '%m/%Y') AS FECHA_VENCIMIENTO_FORMATEADA,
        ES_PREDETERMINADO, 
        FECHA_REGISTRO,
        'VIGENTE' AS ESTADO_TARJETA -- EL FRONTEND MANEJA LA LÓGICA DE VENCIMIENTO
    FROM huellitas_tarjetas_tb
    WHERE ID_USUARIO_FK = P_ID_USUARIO_FK 
      AND ESTA_ACTIVO = TRUE
    ORDER BY ES_PREDETERMINADO DESC, FECHA_REGISTRO DESC;
END//
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_ROTAR_CLAVES_ENCRIPTACION_SP
-- DESCRIPCIÓN: Procedimiento para rotar claves de encriptación y reencriptar datos
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_ROTAR_CLAVES_ENCRIPTACION_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_ROTAR_CLAVES_ENCRIPTACION_SP(
    IN P_NOMBRE_CLAVE VARCHAR(100),
    IN P_NUEVA_VERSION INT
)
BEGIN
    DECLARE V_FINALIZADO INT DEFAULT 0;
    DECLARE V_ID_TARJETA INT;
    DECLARE V_NUMERO_ENCRIPTADO TEXT;
    DECLARE V_CVV_ENCRIPTADO TEXT;
    
    DECLARE CUR_TARJETAS CURSOR FOR 
    SELECT ID_TARJETA_PK, NUMERO_TARJETA_ENCRIPTADO, CVV_ENCRIPTADO 
    FROM huellitas_tarjetas_tb WHERE ESTA_ACTIVO = TRUE;
    
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET V_FINALIZADO = 1;
    
    UPDATE huellitas_claves_encriptacion_tb 
    SET ESTA_ACTIVA = FALSE 
    WHERE NOMBRE_CLAVE = P_NOMBRE_CLAVE AND ESTA_ACTIVA = TRUE;
    
    INSERT INTO huellitas_claves_encriptacion_tb (NOMBRE_CLAVE, CLAVE_ENCRIPTACION, VERSION_CLAVE)
    VALUES (P_NOMBRE_CLAVE, HUELLITAS_GENERAR_CLAVE_AES_FN(), P_NUEVA_VERSION);
    
    OPEN CUR_TARJETAS;
    BUCLE_REENCRIPTACION: LOOP
        FETCH CUR_TARJETAS INTO V_ID_TARJETA, V_NUMERO_ENCRIPTADO, V_CVV_ENCRIPTADO;
        IF V_FINALIZADO = 1 THEN LEAVE BUCLE_REENCRIPTACION; END IF;
        
        UPDATE huellitas_tarjetas_tb 
        SET NUMERO_TARJETA_ENCRIPTADO = HUELLITAS_ENCRIPTAR_DATO_FN(
            HUELLITAS_DESENCRIPTAR_DATO_FN(V_NUMERO_ENCRIPTADO, P_NOMBRE_CLAVE), P_NOMBRE_CLAVE
        ),
        CVV_ENCRIPTADO = HUELLITAS_ENCRIPTAR_DATO_FN(
            HUELLITAS_DESENCRIPTAR_DATO_FN(V_CVV_ENCRIPTADO, P_NOMBRE_CLAVE), P_NOMBRE_CLAVE
        )
        WHERE ID_TARJETA_PK = V_ID_TARJETA;
    END LOOP;
    CLOSE CUR_TARJETAS;
END//
DELIMITER ;


-- ==========================================
-- NOMBRE: HUELLITAS_LISTAR_USUARIO_SP
-- DESCRIPCIÓN: Procedimiento para listar todos los usuarios con sus roles y estados
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_LISTAR_USUARIO_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_LISTAR_USUARIO_SP()
BEGIN
    SELECT 
        U.ID_USUARIO_PK, 
        U.USUARIO_NOMBRE, 
        U.USUARIO_CORREO,
        R.DESCRIPCION_ROL_USUARIO AS ROL, 
        E.ESTADO_DESCRIPCION AS ESTADO
    FROM huellitas_usuarios_tb U
    INNER JOIN huellitas_rol_usuario_tb R 
        ON U.ID_ROL_USUARIO_FK = R.ID_ROL_USUARIO_PK
    INNER JOIN huellitas_estado_tb E 
        ON U.ID_ESTADO_FK = E.ID_ESTADO_PK
    ORDER BY U.ID_USUARIO_PK;
END//
DELIMITER ;


-- ==========================================
-- NOMBRE: HUELLITAS_LISTAR_ROLES_SP
-- DESCRIPCIÓN: Procedimiento para listar todos los roles de usuario
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_LISTAR_ROLES_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_LISTAR_ROLES_SP()
BEGIN
    SELECT 
        R.ID_ROL_USUARIO_PK,
        R.DESCRIPCION_ROL_USUARIO,
        E.ESTADO_DESCRIPCION AS ESTADO
    FROM huellitas_rol_usuario_tb R
    INNER JOIN huellitas_estado_tb E 
        ON R.ID_ESTADO_FK = E.ID_ESTADO_PK
    ORDER BY R.ID_ROL_USUARIO_PK;
END//
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_LISTAR_ROLES_SP
-- DESCRIPCIÓN: Procedimiento para listar todos los roles con información completa
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_LISTAR_ROLES_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_LISTAR_ROLES_SP()
BEGIN
    SELECT 
        R.ID_ROL_USUARIO_PK,
        R.DESCRIPCION_ROL_USUARIO,
        E.ESTADO_DESCRIPCION AS ESTADO
    FROM huellitas_rol_usuario_tb R
    INNER JOIN huellitas_estado_tb E 
        ON R.ID_ESTADO_FK = E.ID_ESTADO_PK
    ORDER BY R.ID_ROL_USUARIO_PK;
END//
DELIMITER ;



-- ==========================================
-- NOMBRE: HUELLITAS_LISTAR_PRODUCTOS_SP
-- DESCRIPCIÓN: Procedimiento para listar todos los productos con información relacionada
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_LISTAR_PRODUCTOS_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_LISTAR_PRODUCTOS_SP()
BEGIN
    SELECT 
        P.ID_PRODUCTO_PK,
        P.PRODUCTO_NOMBRE,
        P.PRODUCTO_DESCRIPCION,
        P.PRODUCTO_PRECIO_UNITARIO,
        P.PRODUCTO_STOCK,
        P.IMAGEN_URL,
        P.FECHA_CREACION,

        -- RELACIONES
        E.ESTADO_DESCRIPCION AS ESTADO,
        PR.PROVEEDOR_NOMBRE AS PROVEEDOR,
        C.DESCRIPCION_CATEGORIA AS CATEGORIA,
        M.NOMBRE_MARCA AS MARCA,
        N.NUEVO_DESCRIPCION AS CONDICION
    FROM 
        huellitas_productos_tb P
        INNER JOIN huellitas_estado_tb E 
            ON P.ID_ESTADO_FK = E.ID_ESTADO_PK
        INNER JOIN huellitas_proveedores_tb PR 
            ON P.ID_PROVEEDOR_FK = PR.ID_PROVEEDOR_PK
        INNER JOIN huellitas_productos_categoria_tb C 
            ON P.ID_CATEGORIA_FK = C.ID_CATEGORIA_PK
        INNER JOIN huellitas_marcas_tb M 
            ON P.ID_MARCA_FK = M.ID_MARCA_PK
        INNER JOIN huellitas_nuevo_tb N 
            ON P.ID_NUEVO_FK = N.ID_NUEVO_PK
    ORDER BY 
        P.FECHA_CREACION DESC;
END//
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_ACTUALIZAR_PRODUCTO_SP
-- DESCRIPCIÓN: Procedimiento para actualizar la información de un producto
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_ACTUALIZAR_PRODUCTO_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_ACTUALIZAR_PRODUCTO_SP (
    IN P_ID_PRODUCTO INT,
    IN P_ID_PROVEEDOR INT,
    IN P_ID_ESTADO INT,
    IN P_ID_CATEGORIA INT,
    IN P_ID_MARCA INT,
    IN P_ID_NUEVO INT,
    IN P_NOMBRE VARCHAR(100),
    IN P_DESCRIPCION VARCHAR(1000),
    IN P_PRECIO DECIMAL(10,2),
    IN P_STOCK INT,
    IN P_IMAGEN_URL VARCHAR(255)
)
BEGIN
    DECLARE V_EXISTE INT;

    -- VERIFICAR QUE EL PRODUCTO EXISTA
    SELECT COUNT(*) INTO V_EXISTE
    FROM huellitas_productos_tb
    WHERE ID_PRODUCTO_PK = P_ID_PRODUCTO;

    IF V_EXISTE = 0 THEN
        SELECT '❌ ERROR: EL PRODUCTO NO EXISTE' AS MENSAJE;
    ELSE
        -- ACTUALIZAR PRODUCTO
		UPDATE huellitas_productos_tb
		SET 
			ID_PROVEEDOR_FK = P_ID_PROVEEDOR,
			ID_ESTADO_FK = P_ID_ESTADO,
			ID_CATEGORIA_FK = P_ID_CATEGORIA,
			ID_MARCA_FK = P_ID_MARCA,
			ID_NUEVO_FK = P_ID_NUEVO,
			PRODUCTO_NOMBRE = P_NOMBRE,
			PRODUCTO_DESCRIPCION = P_DESCRIPCION,
			PRODUCTO_PRECIO_UNITARIO = P_PRECIO,
			PRODUCTO_STOCK = P_STOCK,
			IMAGEN_URL = P_IMAGEN_URL
		WHERE ID_PRODUCTO_PK = P_ID_PRODUCTO;

        SELECT '✅ PRODUCTO ACTUALIZADO CORRECTAMENTE' AS MENSAJE;
    END IF;
END //
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_AGREGAR_PRODUCTO_SP
-- DESCRIPCIÓN: Procedimiento para agregar nuevos productos al sistema
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_AGREGAR_PRODUCTO_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_AGREGAR_PRODUCTO_SP (
    IN P_ID_PROVEEDOR INT,
    IN P_ID_ESTADO INT,
    IN P_ID_CATEGORIA INT,
    IN P_ID_MARCA INT,
    IN P_ID_NUEVO INT,
    IN P_NOMBRE VARCHAR(100),
    IN P_DESCRIPCION VARCHAR(1000),
    IN P_PRECIO DECIMAL(10,2),
    IN P_STOCK INT,
    IN P_IMAGEN_URL VARCHAR(255)
)
BEGIN
    DECLARE V_ERROR VARCHAR(200);

    -- VALIDAR PROVEEDOR EXISTENTE
    IF (SELECT COUNT(*) FROM huellitas_proveedores_tb WHERE ID_PROVEEDOR_PK = P_ID_PROVEEDOR) = 0 THEN
        SET V_ERROR = '❌ ERROR: EL PROVEEDOR NO EXISTE';
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = V_ERROR;
    END IF;

    -- VALIDAR CATEGORÍA EXISTENTE
    IF (SELECT COUNT(*) FROM huellitas_productos_categoria_tb WHERE ID_CATEGORIA_PK = P_ID_CATEGORIA) = 0 THEN
        SET V_ERROR = '❌ ERROR: LA CATEGORÍA NO EXISTE';
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = V_ERROR;
    END IF;

    -- VALIDAR MARCA EXISTENTE
    IF (SELECT COUNT(*) FROM huellitas_marcas_tb WHERE ID_MARCA_PK = P_ID_MARCA) = 0 THEN
        SET V_ERROR = '❌ ERROR: LA MARCA NO EXISTE';
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = V_ERROR;
    END IF;

    -- INSERTAR PRODUCTO
    INSERT INTO huellitas_productos_tb (
        ID_PROVEEDOR_FK,
        ID_ESTADO_FK,
        ID_CATEGORIA_FK,
        ID_MARCA_FK,
        ID_NUEVO_FK,
        PRODUCTO_NOMBRE,
        PRODUCTO_DESCRIPCION,
        PRODUCTO_PRECIO_UNITARIO,
        PRODUCTO_STOCK,
        IMAGEN_URL
    ) VALUES (
        P_ID_PROVEEDOR,
        P_ID_ESTADO,
        P_ID_CATEGORIA,
        P_ID_MARCA,
        P_ID_NUEVO,
        P_NOMBRE,
        P_DESCRIPCION,
        P_PRECIO,
        P_STOCK,
        P_IMAGEN_URL
    );

    -- RETORNAR CONFIRMACIÓN
    SELECT 
        '✅ PRODUCTO AGREGADO CORRECTAMENTE' AS MENSAJE,
        LAST_INSERT_ID() AS ID_PRODUCTO_CREADO;
END //
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_LISTAR_SLIDER_BANNER_SP
-- DESCRIPCIÓN: Procedimiento para listar todos los sliders/banners
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_LISTAR_SLIDER_BANNER_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_LISTAR_SLIDER_BANNER_SP()
BEGIN
    SELECT 
        SB.ID_SLIDER_BANNER_PK,
        SB.IMAGEN_URL,
        SB.DESCRIPCION_SLIDER_BANNER,
        E.ESTADO_DESCRIPCION AS ESTADO
    FROM 
        huellitas_slider_banner_tb SB
    INNER JOIN 
        huellitas_estado_tb E ON SB.ID_ESTADO_FK = E.ID_ESTADO_PK
    ORDER BY 
        SB.ID_SLIDER_BANNER_PK;
END//
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_LISTAR_SLIDER_BANNER_ACTIVOS_SP
-- DESCRIPCIÓN: Procedimiento para listar solo los sliders/banners activos
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_LISTAR_SLIDER_BANNER_ACTIVOS_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_LISTAR_SLIDER_BANNER_ACTIVOS_SP()
BEGIN
    SELECT 
        ID_SLIDER_BANNER_PK,
        IMAGEN_URL,
        DESCRIPCION_SLIDER_BANNER
    FROM huellitas_slider_banner_tb
    WHERE ID_ESTADO_FK = 1; -- solo activos
END//
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_OBTENER_SLIDER_BANNER_POR_ID_SP
-- DESCRIPCIÓN: Procedimiento para obtener un slider/banner por id
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_OBTENER_SLIDER_BANNER_POR_ID_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_OBTENER_SLIDER_BANNER_POR_ID_SP (
    IN P_ID_SLIDER_BANNER INT
)
BEGIN
    -- VERIFICAR SI EL REGISTRO EXISTE
    IF EXISTS (SELECT 1 FROM huellitas_slider_banner_tb WHERE ID_SLIDER_BANNER_PK = P_ID_SLIDER_BANNER) THEN
        -- RETORNAR LOS DATOS DEL SLIDER/BANNER SOLICITADO
        SELECT 
            SB.ID_SLIDER_BANNER_PK,
            SB.IMAGEN_URL,
            SB.DESCRIPCION_SLIDER_BANNER,
            SB.ID_ESTADO_FK,
            E.ESTADO_DESCRIPCION AS NOMBRE_ESTADO
        FROM 
            huellitas_slider_banner_tb SB
        INNER JOIN 
            huellitas_estado_tb E ON SB.ID_ESTADO_FK = E.ID_ESTADO_PK
        WHERE 
            SB.ID_SLIDER_BANNER_PK = P_ID_SLIDER_BANNER;
    ELSE
        -- SI NO EXISTE, RETORNAR MENSAJE
        SELECT 'NO SE ENCONTRÓ EL SLIDER/BANNER CON EL ID ESPECIFICADO' AS MENSAJE;
    END IF;
END//
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_ACTUALIZAR_SLIDER_BANNER_SP
-- DESCRIPCIÓN: Procedimiento para actualizar la información de un slider/banner
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_ACTUALIZAR_SLIDER_BANNER_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_ACTUALIZAR_SLIDER_BANNER_SP(
    IN P_ID_SLIDER_BANNER_PK INT,
    IN P_IMAGEN_URL VARCHAR(500),
    IN P_DESCRIPCION_SLIDER_BANNER VARCHAR(255),
    IN P_ID_ESTADO_FK INT
)
BEGIN
    DECLARE V_EXISTE INT;

    -- VERIFICAR QUE EL SLIDER/BANNER EXISTA
    SELECT COUNT(*) INTO V_EXISTE
    FROM huellitas_slider_banner_tb
    WHERE ID_SLIDER_BANNER_PK = P_ID_SLIDER_BANNER_PK;

    IF V_EXISTE = 0 THEN
        SELECT '❌ ERROR: EL SLIDER/BANNER NO EXISTE' AS MENSAJE;
    ELSE
        -- REALIZAR LA ACTUALIZACIÓN
        UPDATE huellitas_slider_banner_tb
        SET 
            IMAGEN_URL = P_IMAGEN_URL,
            DESCRIPCION_SLIDER_BANNER = P_DESCRIPCION_SLIDER_BANNER,
            ID_ESTADO_FK = P_ID_ESTADO_FK
        WHERE ID_SLIDER_BANNER_PK = P_ID_SLIDER_BANNER_PK;

        SELECT '✅ SLIDER/BANNER ACTUALIZADO CORRECTAMENTE' AS MENSAJE;
    END IF;
END//
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_AGREGAR_SLIDER_BANNER_SP
-- DESCRIPCIÓN: Procedimiento para agregar un slider/banner
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_AGREGAR_SLIDER_BANNER_SP;
DELIMITER $$
CREATE PROCEDURE HUELLITAS_AGREGAR_SLIDER_BANNER_SP (
    IN p_imagen_url VARCHAR(500),
    IN p_descripcion VARCHAR(255),
    IN p_id_estado INT
)
BEGIN
    -- Validación URL obligatoria
    IF p_imagen_url IS NULL OR p_imagen_url = '' THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = '❌ La imagen del banner es requerida.';
    END IF;

    -- Validación del Estado
    IF NOT EXISTS (SELECT 1 FROM huellitas_estado_tb WHERE ID_ESTADO_PK = p_id_estado) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = '❌ El estado seleccionado no existe.';
    END IF;

    -- Inserción
    INSERT INTO huellitas_slider_banner_tb (
        IMAGEN_URL,
        DESCRIPCION_SLIDER_BANNER,
        ID_ESTADO_FK
    )
    VALUES (
        p_imagen_url,
        p_descripcion,
        p_id_estado
    );
END$$
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_AGREGAR_PROVEEDOR_SP
-- DESCRIPCIÓN: Procedimiento para agregar nuevos proveedores con manejo de transacciones
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_AGREGAR_PROVEEDOR_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_AGREGAR_PROVEEDOR_SP(
    IN P_PROVEEDOR_NOMBRE VARCHAR(100),
    IN P_NOMBRE_REPRESENTANTE VARCHAR(100),
    IN P_PROVEEDOR_CORREO VARCHAR(100),
    IN P_ID_ESTADO_FK INT,
    IN P_TELEFONO_CONTACTO INT
)
BEGIN
    DECLARE V_ID_TELEFONO_FK INT;

    -- MANEJADOR DE ERRORES: REVIERTE SI ALGO FALLA
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        SIGNAL SQLSTATE '45000' 
            SET MESSAGE_TEXT = 'ERROR: NO SE PUDO AGREGAR EL PROVEEDOR. SE REVERTIERON LOS CAMBIOS.';
    END;

    START TRANSACTION;

    -- INSERTAR TELÉFONO DE CONTACTO
    INSERT INTO huellitas_telefono_contacto_tb (TELEFONO_CONTACTO, ID_ESTADO_FK)
    VALUES (P_TELEFONO_CONTACTO, P_ID_ESTADO_FK);

    SET V_ID_TELEFONO_FK = LAST_INSERT_ID();

    -- INSERTAR PROVEEDOR CON RELACIÓN AL TELÉFONO
    INSERT INTO huellitas_proveedores_tb 
        (PROVEEDOR_NOMBRE, NOMBRE_REPRESENTANTE, PROVEEDOR_CORREO, ID_ESTADO_FK, ID_TELEFONO_CONTACTO_FK)
    VALUES 
        (P_PROVEEDOR_NOMBRE, P_NOMBRE_REPRESENTANTE, P_PROVEEDOR_CORREO, P_ID_ESTADO_FK, V_ID_TELEFONO_FK);

    COMMIT;
END//
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_ACTUALIZAR_PROVEEDOR_SP
-- DESCRIPCIÓN: Procedimiento para actualizar información de proveedores
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_ACTUALIZAR_PROVEEDOR_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_ACTUALIZAR_PROVEEDOR_SP(
    IN P_ID_PROVEEDOR_PK INT,
    IN P_PROVEEDOR_NOMBRE VARCHAR(100),
    IN P_NOMBRE_REPRESENTANTE VARCHAR(100),
    IN P_PROVEEDOR_CORREO VARCHAR(100),
    IN P_ID_ESTADO_FK INT,
    IN P_TELEFONO_CONTACTO VARCHAR(20),
    IN P_DIRECCION_SENNAS VARCHAR(255)
)
BEGIN
    DECLARE V_ID_TELEFONO INT;
    DECLARE V_ID_DIRECCION INT;

    -- VALIDAR QUE EL PROVEEDOR EXISTA
    IF (SELECT COUNT(*) FROM huellitas_proveedores_tb WHERE ID_PROVEEDOR_PK = P_ID_PROVEEDOR_PK) = 0 THEN
        SIGNAL SQLSTATE '45000' 
            SET MESSAGE_TEXT = 'ERROR: EL PROVEEDOR NO EXISTE';
    END IF;

    -- OBTENER LLAVES ACTUALES DE TELÉFONO Y DIRECCIÓN
    SELECT ID_TELEFONO_CONTACTO_FK, ID_DIRECCION_FK
    INTO V_ID_TELEFONO, V_ID_DIRECCION
    FROM huellitas_proveedores_tb
    WHERE ID_PROVEEDOR_PK = P_ID_PROVEEDOR_PK;

    -- ACTUALIZAR TELÉFONO SI EXISTE
    IF V_ID_TELEFONO IS NOT NULL THEN
        UPDATE huellitas_telefono_contacto_tb
        SET TELEFONO_CONTACTO = P_TELEFONO_CONTACTO
        WHERE ID_TELEFONO_CONTACTO_PK = V_ID_TELEFONO;
    END IF;

    -- ACTUALIZAR DIRECCIÓN SI EXISTE
    IF V_ID_DIRECCION IS NOT NULL THEN
        UPDATE huellitas_direccion_tb
        SET DIRECCION_SENNAS = P_DIRECCION_SENNAS
        WHERE ID_DIRECCION_PK = V_ID_DIRECCION;
    END IF;

    -- ACTUALIZAR PROVEEDOR
    UPDATE huellitas_proveedores_tb
    SET 
        PROVEEDOR_NOMBRE = P_PROVEEDOR_NOMBRE,
        NOMBRE_REPRESENTANTE = P_NOMBRE_REPRESENTANTE,
        PROVEEDOR_CORREO = P_PROVEEDOR_CORREO,
        ID_ESTADO_FK = P_ID_ESTADO_FK
    WHERE ID_PROVEEDOR_PK = P_ID_PROVEEDOR_PK;

    SELECT '✅ PROVEEDOR ACTUALIZADO CORRECTAMENTE' AS MENSAJE;
END//
DELIMITER ;

-- ==========================================
-- PROCEDIMIENTO: HUELLITAS_LISTAR_PROVEEDORES_ACTIVOS_SP
-- DESCRIPCIÓN: Obtiene todos los proveedores con estado ACTIVO
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_LISTAR_PROVEEDORES_ACTIVOS_SP;
DELIMITER $$
CREATE PROCEDURE HUELLITAS_LISTAR_PROVEEDORES_ACTIVOS_SP()
BEGIN
    SELECT 
        ID_PROVEEDOR_PK,
        PROVEEDOR_NOMBRE,
        PROVEEDOR_CORREO,
        NOMBRE_REPRESENTANTE,
        PROVEEDOR_DESCRIPCION_PRODUCTOS,
        ID_DIRECCION_FK,
        ID_TELEFONO_CONTACTO_FK,
        ID_ESTADO_FK
    FROM huellitas_proveedores_tb
    WHERE ID_ESTADO_FK = 1
    ORDER BY PROVEEDOR_NOMBRE ASC;
END$$

DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_RECUPERAR_CONTRASENNA_SP
-- DESCRIPCIÓN: Procedimiento para recuperar/resetear contraseña de usuario
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_RECUPERAR_CONTRASENNA_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_RECUPERAR_CONTRASENNA_SP (
    IN P_ID_USUARIO INT,
    IN P_NUEVA_CONTRASENNA VARCHAR(255)
)
BEGIN
    DECLARE V_EXISTE INT;

    -- VERIFICAR QUE EL USUARIO EXISTA Y ESTÉ ACTIVO
    SELECT COUNT(*) INTO V_EXISTE
    FROM huellitas_usuarios_tb
    WHERE ID_USUARIO_PK = P_ID_USUARIO 
      AND ID_ESTADO_FK = 1; -- 1 = ACTIVO

    IF V_EXISTE = 0 THEN
        SELECT '❌ ERROR: USUARIO NO ENCONTRADO O INACTIVO' AS MENSAJE;
    ELSE
        -- ACTUALIZAR LA CONTRASEÑA (EL TRIGGER HARÁ LA ENCRIPTACIÓN Y REGENERACIÓN DEL SALT)
        UPDATE huellitas_usuarios_tb
        SET USUARIO_CONTRASENNA = P_NUEVA_CONTRASENNA
        WHERE ID_USUARIO_PK = P_ID_USUARIO;

        SELECT '✅ CONTRASEÑA RECUPERADA EXITOSAMENTE' AS MENSAJE;
    END IF;
END//
DELIMITER ;


-- ==========================================
-- NOMBRE: HUELLITAS_OBTENER_USUARIO_POR_ID_SP
-- DESCRIPCIÓN: Procedimiento para obtener información detallada de un usuario por ID
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_OBTENER_USUARIO_POR_ID_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_OBTENER_USUARIO_POR_ID_SP(IN P_ID_USUARIO INT)
BEGIN
    SELECT 
        U.ID_USUARIO_PK,
        U.USUARIO_NOMBRE,
        U.USUARIO_CORREO,
        U.USUARIO_IMAGEN_URL,
        U.USUARIO_IDENTIFICACION,
        R.DESCRIPCION_ROL_USUARIO AS ROL,
        T.TELEFONO_CONTACTO,
        D.DIRECCION_SENNAS,
        D.ID_DIRECCION_PROVINCIA_FK,
        D.ID_DIRECCION_CANTON_FK,
        D.ID_DIRECCION_DISTRITO_FK,
        P.NOMBRE_PROVINCIA,
        C.NOMBRE_CANTON,
        DI.NOMBRE_DISTRITO
    FROM huellitas_usuarios_tb U
    INNER JOIN huellitas_rol_usuario_tb R 
        ON U.ID_ROL_USUARIO_FK = R.ID_ROL_USUARIO_PK
    LEFT JOIN huellitas_telefono_contacto_tb T 
        ON U.ID_TELEFONO_CONTACTO_FK = T.ID_TELEFONO_CONTACTO_PK
    LEFT JOIN huellitas_direccion_tb D 
        ON U.ID_DIRECCION_FK = D.ID_DIRECCION_PK
    LEFT JOIN huellitas_direccion_provincia_tb P 
        ON D.ID_DIRECCION_PROVINCIA_FK = P.ID_DIRECCION_PROVINCIA_PK
    LEFT JOIN huellitas_direccion_canton_tb C 
        ON D.ID_DIRECCION_CANTON_FK = C.ID_DIRECCION_CANTON_PK
    LEFT JOIN huellitas_direccion_distrito_tb DI 
        ON D.ID_DIRECCION_DISTRITO_FK = DI.ID_DIRECCION_DISTRITO_PK
    WHERE U.ID_USUARIO_PK = P_ID_USUARIO;
END//
DELIMITER ;


-- ==========================================
-- NOMBRE: HUELLITAS_ACTUALIZAR_PERFIL_USUARIO_SP
-- DESCRIPCIÓN: Procedimiento para actualizar el perfil completo del usuario
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_ACTUALIZAR_PERFIL_USUARIO_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_ACTUALIZAR_PERFIL_USUARIO_SP(
    IN P_ID_USUARIO_PK INT,
    IN P_USUARIO_NOMBRE VARCHAR(100),
    IN P_USUARIO_IDENTIFICACION INT,
    IN P_USUARIO_CUENTA_BANCARIA VARCHAR(50),
    IN P_USUARIO_IMAGEN_URL VARCHAR(500),
    IN P_ID_PROVINCIA_FK INT,
    IN P_ID_CANTON_FK INT,
    IN P_ID_DISTRITO_FK INT,
    IN P_DIRECCION_SENNAS VARCHAR(200),
    IN P_TELEFONO_CONTACTO INT
)
BEGIN
    DECLARE V_ID_DIRECCION INT;
    DECLARE V_ID_TELEFONO INT;
    DECLARE V_ID_ESTADO_ACTIVO INT DEFAULT 1;

    -- Usuario existe
    IF NOT EXISTS (SELECT 1 FROM huellitas_usuarios_tb WHERE ID_USUARIO_PK = P_ID_USUARIO_PK) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'EL USUARIO ESPECIFICADO NO EXISTE.';
    END IF;

    -- Evitar choque de identificación con otro usuario
    IF P_USUARIO_IDENTIFICACION IS NOT NULL AND P_USUARIO_IDENTIFICACION <> 0 THEN
        IF EXISTS (
            SELECT 1 FROM huellitas_usuarios_tb 
            WHERE USUARIO_IDENTIFICACION = P_USUARIO_IDENTIFICACION
              AND ID_USUARIO_PK <> P_ID_USUARIO_PK
        ) THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'La identificación ya está registrada por otro usuario.';
        END IF;
    END IF;

    -- DIRECCIÓN
    SELECT ID_DIRECCION_FK INTO V_ID_DIRECCION
      FROM huellitas_usuarios_tb
     WHERE ID_USUARIO_PK = P_ID_USUARIO_PK;

    IF P_ID_PROVINCIA_FK > 0 AND P_ID_CANTON_FK > 0 AND P_ID_DISTRITO_FK > 0 THEN
        IF V_ID_DIRECCION IS NULL THEN
            INSERT INTO huellitas_direccion_tb (
                ID_ESTADO_FK, ID_DIRECCION_PROVINCIA_FK, ID_DIRECCION_CANTON_FK, ID_DIRECCION_DISTRITO_FK, DIRECCION_SENNAS
            ) VALUES (
                V_ID_ESTADO_ACTIVO, P_ID_PROVINCIA_FK, P_ID_CANTON_FK, P_ID_DISTRITO_FK, P_DIRECCION_SENNAS
            );
            SET V_ID_DIRECCION = LAST_INSERT_ID();
        ELSE
            UPDATE huellitas_direccion_tb
               SET ID_DIRECCION_PROVINCIA_FK = P_ID_PROVINCIA_FK,
                   ID_DIRECCION_CANTON_FK   = P_ID_CANTON_FK,
                   ID_DIRECCION_DISTRITO_FK = P_ID_DISTRITO_FK,
                   DIRECCION_SENNAS         = P_DIRECCION_SENNAS
             WHERE ID_DIRECCION_PK = V_ID_DIRECCION;
        END IF;
    END IF;

    -- TELÉFONO (solo si viene > 0)
    SELECT ID_TELEFONO_CONTACTO_FK INTO V_ID_TELEFONO
      FROM huellitas_usuarios_tb
     WHERE ID_USUARIO_PK = P_ID_USUARIO_PK;

    IF COALESCE(P_TELEFONO_CONTACTO,0) > 0 THEN
        IF V_ID_TELEFONO IS NULL THEN
            INSERT INTO huellitas_telefono_contacto_tb (ID_ESTADO_FK, TELEFONO_CONTACTO)
            VALUES (V_ID_ESTADO_ACTIVO, P_TELEFONO_CONTACTO);
            SET V_ID_TELEFONO = LAST_INSERT_ID();
        ELSE
            UPDATE huellitas_telefono_contacto_tb
               SET TELEFONO_CONTACTO = P_TELEFONO_CONTACTO
             WHERE ID_TELEFONO_CONTACTO_PK = V_ID_TELEFONO;
        END IF;
    END IF;

    -- USUARIO (nota COALESCE/NULLIF)
    UPDATE huellitas_usuarios_tb
       SET USUARIO_NOMBRE         = P_USUARIO_NOMBRE,
           USUARIO_IDENTIFICACION = COALESCE(NULLIF(P_USUARIO_IDENTIFICACION,0), USUARIO_IDENTIFICACION),
           USUARIO_CUENTA_BANCARIA= P_USUARIO_CUENTA_BANCARIA,
           USUARIO_IMAGEN_URL     = P_USUARIO_IMAGEN_URL,
           ID_DIRECCION_FK        = COALESCE(V_ID_DIRECCION, ID_DIRECCION_FK),
           ID_TELEFONO_CONTACTO_FK= COALESCE(V_ID_TELEFONO, ID_TELEFONO_CONTACTO_FK)
     WHERE ID_USUARIO_PK = P_ID_USUARIO_PK;

    -- CONFIRMACIÓN
    SELECT '✅ DATOS ACTUALIZADOS' AS MENSAJE, P_ID_USUARIO_PK AS ID_USUARIO,
           V_ID_DIRECCION AS ID_DIRECCION, V_ID_TELEFONO AS ID_TELEFONO;
END//
DELIMITER ;
  
-- ==========================================
-- NOMBRE: HUELLITAS_CREAR_DESCUENTO_SP
-- DESCRIPCIÓN: Procedimiento para crear nuevos descuentos temporales en productos
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_CREAR_DESCUENTO_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_CREAR_DESCUENTO_SP(
    IN P_ID_PRODUCTO_FK INT,
    IN P_PORCENTAJE_DESCUENTO DECIMAL(5,2),
    IN P_FECHA_FIN DATE
)
BEGIN
    DECLARE V_PRODUCTO_EXISTE INT;
    
    -- VERIFICAR QUE EL PRODUCTO EXISTA
    SELECT COUNT(*) INTO V_PRODUCTO_EXISTE
    FROM huellitas_productos_tb 
    WHERE ID_PRODUCTO_PK = P_ID_PRODUCTO_FK 
      AND ID_ESTADO_FK = 1; -- 1 = ACTIVO
    
    IF V_PRODUCTO_EXISTE = 0 THEN
        SELECT '❌ ERROR: PRODUCTO NO ENCONTRADO O INACTIVO' AS MENSAJE;
        
    ELSEIF P_FECHA_FIN < CURDATE() THEN
        SELECT '❌ ERROR: LA FECHA FIN NO PUEDE SER ANTERIOR A HOY' AS MENSAJE;
        
    ELSE
        -- INSERTAR NUEVO DESCUENTO (FECHA INICIO IMPLÍCITA = HOY)
        INSERT INTO huellitas_descuentos_tb (
            ID_PRODUCTO_FK,
            ID_ESTADO_FK,
            PORCENTAJE_DESCUENTO,
            FECHA_FIN
        ) VALUES (
            P_ID_PRODUCTO_FK,
            1, -- ACTIVO
            P_PORCENTAJE_DESCUENTO,
            P_FECHA_FIN
        );
        
        SELECT 
            '✅ DESCUENTO CREADO EXITOSAMENTE' AS MENSAJE,
            LAST_INSERT_ID() AS ID_DESCUENTO_CREADO,
            CURDATE() AS FECHA_INICIO,
            P_FECHA_FIN AS FECHA_FIN;
    END IF;
END//
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_DESACTIVAR_DESCUENTOS_VENCIDOS_SP
-- DESCRIPCIÓN: Procedimiento para desactivar automáticamente descuentos vencidos
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_DESACTIVAR_DESCUENTOS_VENCIDOS_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_DESACTIVAR_DESCUENTOS_VENCIDOS_SP()
BEGIN
    -- DESACTIVAR DESCUENTOS CUYA FECHA_FIN YA PASÓ
    UPDATE huellitas_descuentos_tb 
    SET ID_ESTADO_FK = 0 -- INACTIVO
    WHERE ID_ESTADO_FK = 1 -- ACTIVO
      AND FECHA_FIN < CURDATE();
    
    -- MOSTRAR CUÁNTOS REGISTROS FUERON AFECTADOS
    SELECT 
        CONCAT('✅ DESCUENTOS DESACTIVADOS: ', ROW_COUNT()) AS RESULTADO;
END//
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_LIMPIAR_DESCUENTOS_VENCIDOS_EV
-- DESCRIPCIÓN: Evento programado para limpiar descuentos vencidos diariamente
-- ==========================================
DROP EVENT IF EXISTS HUELLITAS_LIMPIAR_DESCUENTOS_VENCIDOS_EV;
DELIMITER //
CREATE EVENT HUELLITAS_LIMPIAR_DESCUENTOS_VENCIDOS_EV
ON SCHEDULE EVERY 1 DAY
STARTS CURRENT_TIMESTAMP
DO
BEGIN
    CALL HUELLITAS_DESACTIVAR_DESCUENTOS_VENCIDOS_SP();
END//
DELIMITER ;


-- ==========================================
-- NOMBRE: HUELLITAS_OBTENER_DESCUENTOS_ACTIVOS_SP
-- DESCRIPCIÓN: Procedimiento para obtener descuentos activos de productos
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_OBTENER_DESCUENTOS_ACTIVOS_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_OBTENER_DESCUENTOS_ACTIVOS_SP(
    IN P_ID_PRODUCTO_FK INT -- NULL PARA TODOS LOS PRODUCTOS
)
BEGIN
    IF P_ID_PRODUCTO_FK IS NULL THEN
        -- OBTENER TODOS LOS DESCUENTOS ACTIVOS
        SELECT 
            D.ID_DESCUENTO_PK,
            P.PRODUCTO_NOMBRE AS NOMBRE_PRODUCTO,
            D.PORCENTAJE_DESCUENTO,
            D.FECHA_CREACION AS FECHA_INICIO, -- FECHA CREACIÓN COMO INICIO
            D.FECHA_FIN,
            CASE 
                WHEN D.FECHA_FIN >= CURDATE() THEN 'ACTIVO'
                ELSE 'VENCIDO'
            END AS ESTADO_DESCUENTO,
            DATEDIFF(D.FECHA_FIN, CURDATE()) AS DIAS_RESTANTES
        FROM huellitas_descuentos_tb D
        INNER JOIN huellitas_productos_tb P 
            ON D.ID_PRODUCTO_FK = P.ID_PRODUCTO_PK
        WHERE D.ID_ESTADO_FK = 1
          AND D.FECHA_FIN >= CURDATE()
        ORDER BY D.FECHA_FIN ASC;
    ELSE
        -- OBTENER DESCUENTOS DE UN PRODUCTO ESPECÍFICO
        SELECT 
            D.ID_DESCUENTO_PK,
            P.PRODUCTO_NOMBRE AS NOMBRE_PRODUCTO,
            D.PORCENTAJE_DESCUENTO,
            D.FECHA_CREACION AS FECHA_INICIO,
            D.FECHA_FIN,
            CASE 
                WHEN D.FECHA_FIN >= CURDATE() THEN 'ACTIVO'
                ELSE 'VENCIDO'
            END AS ESTADO_DESCUENTO,
            DATEDIFF(D.FECHA_FIN, CURDATE()) AS DIAS_RESTANTES
        FROM huellitas_descuentos_tb D
        INNER JOIN huellitas_productos_tb P 
            ON D.ID_PRODUCTO_FK = P.ID_PRODUCTO_PK
        WHERE D.ID_PRODUCTO_FK = P_ID_PRODUCTO_FK
          AND D.ID_ESTADO_FK = 1
          AND D.FECHA_FIN >= CURDATE()
        ORDER BY D.FECHA_FIN ASC;
    END IF;
END//
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_AGREGAR_CATEGORIA_SP
-- DESCRIPCIÓN: Procedimiento para insertar nuevas categorías de productos
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_AGREGAR_CATEGORIA_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_AGREGAR_CATEGORIA_SP (
    IN P_ID_ESTADO_FK INT,
    IN P_DESCRIPCION_CATEGORIA VARCHAR(100)
)
BEGIN
    INSERT INTO huellitas_productos_categoria_tb (ID_ESTADO_FK, DESCRIPCION_CATEGORIA)
    VALUES (P_ID_ESTADO_FK, P_DESCRIPCION_CATEGORIA);

    SELECT 
        '✅ CATEGORÍA AGREGADA CORRECTAMENTE' AS MENSAJE,
        LAST_INSERT_ID() AS ID_CATEGORIA_CREADA;
END //
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_LISTAR_CATEGORIAS_SP
-- DESCRIPCIÓN: Procedimiento para listar todas las categorías de productos
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_LISTAR_CATEGORIAS_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_LISTAR_CATEGORIAS_SP()
BEGIN
    SELECT 
        C.ID_CATEGORIA_PK,
        C.DESCRIPCION_CATEGORIA,
        E.ESTADO_DESCRIPCION AS ESTADO
    FROM huellitas_productos_categoria_tb AS C
    INNER JOIN huellitas_estado_tb AS E 
        ON E.ID_ESTADO_PK = C.ID_ESTADO_FK
    ORDER BY C.ID_CATEGORIA_PK ASC;
END //
DELIMITER ;

-- ==========================================
-- NOMBRE: HHUELLITAS_LISTAR_CATEGORIAS_ACTIVAS_SP
-- DESCRIPCIÓN: Procedimiento para listar todas las categorías activas de productos
-- ==========================================
-- ==========================================
-- PROCEDIMIENTO: HUELLITAS_LISTAR_CATEGORIAS_ACTIVAS_SP
-- DESCRIPCIÓN: Obtiene todas las categorías activas
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_LISTAR_CATEGORIAS_ACTIVAS_SP;
DELIMITER $$
CREATE PROCEDURE HUELLITAS_LISTAR_CATEGORIAS_ACTIVAS_SP()
BEGIN
    SELECT 
        ID_CATEGORIA_PK,
        DESCRIPCION_CATEGORIA,
        ID_ESTADO_FK
    FROM huellitas_productos_categoria_tb
    WHERE ID_ESTADO_FK = 1
    ORDER BY DESCRIPCION_CATEGORIA ASC;
END$$
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_ACTUALIZAR_CATEGORIA_SP
-- DESCRIPCIÓN: Procedimiento para actualizar categorías de productos
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_ACTUALIZAR_CATEGORIA_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_ACTUALIZAR_CATEGORIA_SP (
    IN P_ID_CATEGORIA_PK INT,
    IN P_ID_ESTADO_FK INT,
    IN P_DESCRIPCION_CATEGORIA VARCHAR(100)
)
BEGIN
    DECLARE V_AFECTADAS INT;

    UPDATE huellitas_productos_categoria_tb
    SET 
        ID_ESTADO_FK = P_ID_ESTADO_FK,
        DESCRIPCION_CATEGORIA = P_DESCRIPCION_CATEGORIA
    WHERE ID_CATEGORIA_PK = P_ID_CATEGORIA_PK;

    SET V_AFECTADAS = ROW_COUNT();

    IF V_AFECTADAS > 0 THEN
        SELECT CONCAT('✅ CATEGORÍA ACTUALIZADA CORRECTAMENTE (ID: ', P_ID_CATEGORIA_PK, ')') AS MENSAJE;
    ELSE
        SELECT '⚠️ NO SE ENCONTRÓ NINGUNA CATEGORÍA CON EL ID ESPECIFICADO O NO HUBO CAMBIOS.' AS MENSAJE;
    END IF;
END //
DELIMITER ;

-- ==========================================
-- PROCEDIMIENTO: HUELLITAS_OBTENER_CATEGORIA_POR_ID_SP
-- DESCRIPCIÓN: Obtiene una categoría por ID
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_OBTENER_CATEGORIA_POR_ID_SP;
DELIMITER $$
CREATE PROCEDURE HUELLITAS_OBTENER_CATEGORIA_POR_ID_SP(
    IN p_id_categoria INT
)
BEGIN
    SELECT ID_CATEGORIA_PK,
           DESCRIPCION_CATEGORIA,
           ID_ESTADO_FK
    FROM huellitas_productos_categoria_tb
    WHERE ID_CATEGORIA_PK = p_id_categoria;
END$$

DELIMITER ;



-- ==========================================
-- NOMBRE: HUELLITAS_AGREGAR_MARCA_SP
-- DESCRIPCIÓN: Procedimiento para insertar nuevas marcas de productos
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_AGREGAR_MARCA_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_AGREGAR_MARCA_SP (
    IN P_NOMBRE_MARCA VARCHAR(100),
    IN P_ID_ESTADO_FK INT,
    IN P_MARCA_IMAGEN_URL VARCHAR(500)
)
BEGIN
    DECLARE V_ID_MARCA INT;

    -- INSERTA NUEVA MARCA
    INSERT INTO huellitas_marcas_tb (NOMBRE_MARCA, ID_ESTADO_FK, MARCA_IMAGEN_URL)
    VALUES (P_NOMBRE_MARCA, P_ID_ESTADO_FK, P_MARCA_IMAGEN_URL);

    SET V_ID_MARCA = LAST_INSERT_ID();

    -- DEVUELVE MENSAJE Y EL ID GENERADO
    SELECT 
        '✅ MARCA AGREGADA CORRECTAMENTE' AS MENSAJE,
        V_ID_MARCA AS ID_MARCA_CREADA,
        P_NOMBRE_MARCA AS NOMBRE_MARCA,
        P_MARCA_IMAGEN_URL AS IMAGEN;
END //
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_ACTUALIZAR_MARCA_SP
-- DESCRIPCIÓN: Procedimiento para actualizar marcas de productos
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_ACTUALIZAR_MARCA_SP;
DELIMITER $$
CREATE PROCEDURE HUELLITAS_ACTUALIZAR_MARCA_SP(
    IN p_id_marca INT,
    IN p_nombre_marca VARCHAR(100),
    IN p_id_estado INT,
    IN p_imagen_url VARCHAR(500)
)
BEGIN
    UPDATE huellitas_marcas_tb
    SET
        NOMBRE_MARCA = p_nombre_marca,
        ID_ESTADO_FK = p_id_estado,
        MARCA_IMAGEN_URL = p_imagen_url
    WHERE ID_MARCA_PK = p_id_marca;
END$$
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_LISTAR_MARCAS_SP
-- DESCRIPCIÓN: Procedimiento para listar
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_LISTAR_MARCAS_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_LISTAR_MARCAS_SP()
BEGIN
    SELECT 
        M.ID_MARCA_PK,
        M.NOMBRE_MARCA,
        M.MARCA_IMAGEN_URL,
        E.ESTADO_DESCRIPCION AS ESTADO
    FROM huellitas_marcas_tb AS M
    INNER JOIN huellitas_estado_tb AS E 
        ON E.ID_ESTADO_PK = M.ID_ESTADO_FK
    ORDER BY M.ID_MARCA_PK ASC;
END //
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_LISTAR_MARCAS_ACTIVAS_SP
-- DESCRIPCIÓN: Procedimiento para listar solo las marcas activas
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_LISTAR_MARCAS_ACTIVAS_SP;
DELIMITER $$
CREATE PROCEDURE HUELLITAS_LISTAR_MARCAS_ACTIVAS_SP()
BEGIN
    SELECT 
        ID_MARCA_PK,
        NOMBRE_MARCA,
        MARCA_IMAGEN_URL,
        ID_ESTADO_FK
    FROM huellitas_marcas_tb
    WHERE ID_ESTADO_FK = 1
    ORDER BY NOMBRE_MARCA ASC;
END$$
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_LISTAR_PRODUCTOS_ACTIVOS_SP
-- DESCRIPCIÓN: Procedimiento para listar solo los productos activos
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_LISTAR_PRODUCTOS_ACTIVOS_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_LISTAR_PRODUCTOS_ACTIVOS_SP()
BEGIN
    SELECT
        P.ID_PRODUCTO_PK,
        P.PRODUCTO_NOMBRE,
        P.PRODUCTO_DESCRIPCION,
        P.PRODUCTO_PRECIO_UNITARIO,
        P.PRODUCTO_STOCK,
        P.IMAGEN_URL,
        P.FECHA_CREACION,
        
        -- RELACIONES
        E.ESTADO_DESCRIPCION AS ESTADO,
        PR.PROVEEDOR_NOMBRE AS PROVEEDOR,
        C.DESCRIPCION_CATEGORIA AS CATEGORIA,
        M.NOMBRE_MARCA AS MARCA,
        N.NUEVO_DESCRIPCION AS CONDICION
    FROM 
        huellitas_productos_tb AS P
        INNER JOIN huellitas_estado_tb AS E 
            ON P.ID_ESTADO_FK = E.ID_ESTADO_PK
        INNER JOIN huellitas_proveedores_tb AS PR 
            ON P.ID_PROVEEDOR_FK = PR.ID_PROVEEDOR_PK
        INNER JOIN huellitas_productos_categoria_tb AS C 
            ON P.ID_CATEGORIA_FK = C.ID_CATEGORIA_PK
        INNER JOIN huellitas_marcas_tb AS M 
            ON P.ID_MARCA_FK = M.ID_MARCA_PK
        INNER JOIN huellitas_nuevo_tb AS N 
            ON P.ID_NUEVO_FK = N.ID_NUEVO_PK
    WHERE P.ID_ESTADO_FK = 1  -- SOLO PRODUCTOS ACTIVOS
    ORDER BY P.FECHA_CREACION DESC;
END//
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_LISTAR_PRODUCTOS_ACTIVOS_NUEVOS_SP
-- DESCRIPCIÓN: Procedimiento para listar productos activos y nuevos
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_LISTAR_PRODUCTOS_ACTIVOS_NUEVOS_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_LISTAR_PRODUCTOS_ACTIVOS_NUEVOS_SP()
BEGIN
    SELECT
        P.ID_PRODUCTO_PK,
        P.PRODUCTO_NOMBRE,
        P.PRODUCTO_DESCRIPCION,
        P.PRODUCTO_PRECIO_UNITARIO,
        P.PRODUCTO_STOCK,
        P.IMAGEN_URL,
        P.FECHA_CREACION,
        
        -- RELACIONES
        E.ESTADO_DESCRIPCION AS ESTADO,
        PR.PROVEEDOR_NOMBRE AS PROVEEDOR,
        C.DESCRIPCION_CATEGORIA AS CATEGORIA,
        M.NOMBRE_MARCA AS MARCA,
        N.NUEVO_DESCRIPCION AS CONDICION
    FROM 
        huellitas_productos_tb AS P
        INNER JOIN huellitas_estado_tb AS E 
            ON P.ID_ESTADO_FK = E.ID_ESTADO_PK
        INNER JOIN huellitas_proveedores_tb AS PR 
            ON P.ID_PROVEEDOR_FK = PR.ID_PROVEEDOR_PK
        INNER JOIN huellitas_productos_categoria_tb AS C 
            ON P.ID_CATEGORIA_FK = C.ID_CATEGORIA_PK
        INNER JOIN huellitas_marcas_tb AS M 
            ON P.ID_MARCA_FK = M.ID_MARCA_PK
        INNER JOIN huellitas_nuevo_tb AS N 
            ON P.ID_NUEVO_FK = N.ID_NUEVO_PK
    WHERE P.ID_ESTADO_FK = 1  -- SOLO PRODUCTOS ACTIVOS
      AND P.ID_NUEVO_FK = 1   -- SOLO PRODUCTOS NUEVOS
    ORDER BY P.FECHA_CREACION DESC;
END//
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_OBTENER_PRODUCTO_ACTIVO_POR_ID_SP
-- DESCRIPCIÓN: Procedimiento para obtener producto activo por id
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_OBTENER_PRODUCTO_ACTIVO_POR_ID_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_OBTENER_PRODUCTO_ACTIVO_POR_ID_SP(IN P_ID_PRODUCTO INT)
BEGIN
    SELECT
        P.ID_PRODUCTO_PK,
        P.PRODUCTO_NOMBRE,
        P.PRODUCTO_DESCRIPCION,
        P.PRODUCTO_PRECIO_UNITARIO,
        P.PRODUCTO_STOCK,
        P.IMAGEN_URL,
        P.FECHA_CREACION,
        
        -- RELACIONES
        E.ESTADO_DESCRIPCION AS ESTADO,
        PR.PROVEEDOR_NOMBRE AS PROVEEDOR,
        C.DESCRIPCION_CATEGORIA AS CATEGORIA,
        M.NOMBRE_MARCA AS MARCA,
        N.NUEVO_DESCRIPCION AS CONDICION
    FROM 
        huellitas_productos_tb AS P
        INNER JOIN huellitas_estado_tb AS E 
            ON P.ID_ESTADO_FK = E.ID_ESTADO_PK
        INNER JOIN huellitas_proveedores_tb AS PR 
            ON P.ID_PROVEEDOR_FK = PR.ID_PROVEEDOR_PK
        INNER JOIN huellitas_productos_categoria_tb AS C 
            ON P.ID_CATEGORIA_FK = C.ID_CATEGORIA_PK
        INNER JOIN huellitas_marcas_tb AS M 
            ON P.ID_MARCA_FK = M.ID_MARCA_PK
        INNER JOIN huellitas_nuevo_tb AS N 
            ON P.ID_NUEVO_FK = N.ID_NUEVO_PK
    WHERE P.ID_ESTADO_FK = 1  -- SOLO PRODUCTOS ACTIVOS
      AND P.ID_PRODUCTO_PK = P_ID_PRODUCTO;
END//
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_LISTAR_PRODUCTOS_BUSCADOS_ACTIVOS_SP
-- DESCRIPCIÓN: Procedimiento para listar los productos buscados por el cliente
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_LISTAR_PRODUCTOS_BUSCADOS_ACTIVOS_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_LISTAR_PRODUCTOS_BUSCADOS_ACTIVOS_SP(
    IN P_BUSQUEDA VARCHAR(100)
)
BEGIN
    SELECT
        P.ID_PRODUCTO_PK,
        P.PRODUCTO_NOMBRE,
        P.PRODUCTO_DESCRIPCION,
        P.PRODUCTO_PRECIO_UNITARIO,
        P.PRODUCTO_STOCK,
        P.IMAGEN_URL,
        P.FECHA_CREACION,
        
        -- RELACIONES
        E.ESTADO_DESCRIPCION AS ESTADO,
        PR.PROVEEDOR_NOMBRE AS PROVEEDOR,
        C.DESCRIPCION_CATEGORIA AS CATEGORIA,
        M.NOMBRE_MARCA AS MARCA,
        N.NUEVO_DESCRIPCION AS CONDICION
    FROM 
        huellitas_productos_tb AS P
        INNER JOIN huellitas_estado_tb AS E 
            ON P.ID_ESTADO_FK = E.ID_ESTADO_PK
        INNER JOIN huellitas_proveedores_tb AS PR 
            ON P.ID_PROVEEDOR_FK = PR.ID_PROVEEDOR_PK
        INNER JOIN huellitas_productos_categoria_tb AS C 
            ON P.ID_CATEGORIA_FK = C.ID_CATEGORIA_PK
        INNER JOIN huellitas_marcas_tb AS M 
            ON P.ID_MARCA_FK = M.ID_MARCA_PK
        INNER JOIN huellitas_nuevo_tb AS N 
            ON P.ID_NUEVO_FK = N.ID_NUEVO_PK
    WHERE 
        P.ID_ESTADO_FK = 1  -- SOLO PRODUCTOS ACTIVOS
        AND (
            P.PRODUCTO_NOMBRE LIKE CONCAT('%', P_BUSQUEDA, '%')
            OR P.PRODUCTO_DESCRIPCION LIKE CONCAT('%', P_BUSQUEDA, '%')
            OR M.NOMBRE_MARCA LIKE CONCAT('%', P_BUSQUEDA, '%')
            OR C.DESCRIPCION_CATEGORIA LIKE CONCAT('%', P_BUSQUEDA, '%')
        )
    ORDER BY P.FECHA_CREACION DESC;
END//
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_BUSCAR_PRODUCTOS_ADMIN_SP
-- DESCRIPCIÓN: Procedimiento para buscar productos por parte del admin con paginación.
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_BUSCAR_PRODUCTOS_ADMIN_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_BUSCAR_PRODUCTOS_ADMIN_SP(
    IN P_SEARCH_TERM VARCHAR(100),
    IN P_LIMIT_ROWS INT,
    IN P_OFFSET_ROWS INT
)
BEGIN
    SELECT 
        P.ID_PRODUCTO_PK,
        P.PRODUCTO_NOMBRE,
        P.PRODUCTO_DESCRIPCION,
        P.PRODUCTO_PRECIO_UNITARIO,
        P.PRODUCTO_STOCK,
        P.IMAGEN_URL,
        C.DESCRIPCION_CATEGORIA AS CATEGORIA,
        PR.PROVEEDOR_NOMBRE AS PROVEEDOR,
        E.ESTADO_DESCRIPCION AS ESTADO
    FROM huellitas_productos_tb AS P
    INNER JOIN huellitas_productos_categoria_tb AS C 
        ON P.ID_CATEGORIA_FK = C.ID_CATEGORIA_PK
    INNER JOIN huellitas_proveedores_tb AS PR 
        ON P.ID_PROVEEDOR_FK = PR.ID_PROVEEDOR_PK
    INNER JOIN huellitas_estado_tb AS E 
        ON P.ID_ESTADO_FK = E.ID_ESTADO_PK
    WHERE 
        P.PRODUCTO_NOMBRE LIKE CONCAT('%', P_SEARCH_TERM, '%')
        OR C.DESCRIPCION_CATEGORIA LIKE CONCAT('%', P_SEARCH_TERM, '%')
        OR PR.PROVEEDOR_NOMBRE LIKE CONCAT('%', P_SEARCH_TERM, '%')
    ORDER BY P.PRODUCTO_NOMBRE ASC
    LIMIT P_LIMIT_ROWS OFFSET P_OFFSET_ROWS;
END //
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_BUSCAR_CATEGORIAS_ADMIN_SP
-- DESCRIPCIÓN: Procedimiento para buscar categorías con paginación.
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_BUSCAR_CATEGORIAS_ADMIN_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_BUSCAR_CATEGORIAS_ADMIN_SP(
    IN P_SEARCH_TERM VARCHAR(100),
    IN P_LIMIT_ROWS INT,
    IN P_OFFSET_ROWS INT
)
BEGIN
    SELECT 
        C.ID_CATEGORIA_PK,
        C.DESCRIPCION_CATEGORIA,
        E.ESTADO_DESCRIPCION AS ESTADO
    FROM huellitas_productos_categoria_tb AS C
    INNER JOIN huellitas_estado_tb AS E 
        ON C.ID_ESTADO_FK = E.ID_ESTADO_PK
    WHERE 
        C.DESCRIPCION_CATEGORIA LIKE CONCAT('%', P_SEARCH_TERM, '%')
        OR E.ESTADO_DESCRIPCION LIKE CONCAT('%', P_SEARCH_TERM, '%')
    ORDER BY C.DESCRIPCION_CATEGORIA ASC
    LIMIT P_LIMIT_ROWS OFFSET P_OFFSET_ROWS;
END //
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_BUSCAR_MARCAS_ADMIN_SP
-- DESCRIPCIÓN: Procedimiento para buscar marcas con paginación.
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_BUSCAR_MARCAS_ADMIN_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_BUSCAR_MARCAS_ADMIN_SP(
    IN P_SEARCH_TERM VARCHAR(100),
    IN P_LIMIT_ROWS INT,
    IN P_OFFSET_ROWS INT
)
BEGIN
    SELECT 
        M.ID_MARCA_PK,
        M.NOMBRE_MARCA,
        M.MARCA_IMAGEN_URL,
        E.ESTADO_DESCRIPCION AS ESTADO
    FROM huellitas_marcas_tb AS M
    INNER JOIN huellitas_estado_tb AS E 
        ON M.ID_ESTADO_FK = E.ID_ESTADO_PK
    WHERE 
        M.NOMBRE_MARCA LIKE CONCAT('%', P_SEARCH_TERM, '%')
        OR E.ESTADO_DESCRIPCION LIKE CONCAT('%', P_SEARCH_TERM, '%')
    ORDER BY M.NOMBRE_MARCA ASC
    LIMIT P_LIMIT_ROWS OFFSET P_OFFSET_ROWS;
END //
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_BUSCAR_USUARIOS_ADMIN_SP
-- DESCRIPCIÓN: Procedimiento para buscar usuarios con paginación.
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_BUSCAR_USUARIOS_ADMIN_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_BUSCAR_USUARIOS_ADMIN_SP(
    IN P_SEARCH_TERM VARCHAR(100),
    IN P_LIMIT_ROWS INT,
    IN P_OFFSET_ROWS INT
)
BEGIN
    SELECT 
        U.ID_USUARIO_PK,
        U.USUARIO_NOMBRE,
        U.USUARIO_CORREO,
        U.USUARIO_IDENTIFICACION,
        R.DESCRIPCION_ROL_USUARIO AS ROL,
        E.ESTADO_DESCRIPCION AS ESTADO,
        COALESCE(T.TELEFONO_CONTACTO, 'NO REGISTRADO') AS TELEFONO,
        COALESCE(D.DIRECCION_SENNAS, 'NO REGISTRADA') AS DIRECCION,
        COALESCE(PROV.NOMBRE_PROVINCIA, '') AS PROVINCIA,
        COALESCE(CANT.NOMBRE_CANTON, '') AS CANTON,
        COALESCE(DIST.NOMBRE_DISTRITO, '') AS DISTRITO
    FROM huellitas_usuarios_tb AS U
    INNER JOIN huellitas_rol_usuario_tb AS R 
        ON U.ID_ROL_USUARIO_FK = R.ID_ROL_USUARIO_PK
    INNER JOIN huellitas_estado_tb AS E 
        ON U.ID_ESTADO_FK = E.ID_ESTADO_PK
    LEFT JOIN huellitas_telefono_contacto_tb AS T 
        ON U.ID_TELEFONO_CONTACTO_FK = T.ID_TELEFONO_CONTACTO_PK
    LEFT JOIN huellitas_direccion_tb AS D 
        ON U.ID_DIRECCION_FK = D.ID_DIRECCION_PK
    LEFT JOIN huellitas_direccion_provincia_tb AS PROV 
        ON D.ID_DIRECCION_PROVINCIA_FK = PROV.ID_DIRECCION_PROVINCIA_PK
    LEFT JOIN huellitas_direccion_canton_tb AS CANT 
        ON D.ID_DIRECCION_CANTON_FK = CANT.ID_DIRECCION_CANTON_PK
    LEFT JOIN huellitas_direccion_distrito_tb AS DIST 
        ON D.ID_DIRECCION_DISTRITO_FK = DIST.ID_DIRECCION_DISTRITO_PK
    WHERE 
        U.USUARIO_NOMBRE LIKE CONCAT('%', P_SEARCH_TERM, '%')
        OR U.USUARIO_CORREO LIKE CONCAT('%', P_SEARCH_TERM, '%')
        OR R.DESCRIPCION_ROL_USUARIO LIKE CONCAT('%', P_SEARCH_TERM, '%')
        OR E.ESTADO_DESCRIPCION LIKE CONCAT('%', P_SEARCH_TERM, '%')
        OR PROV.NOMBRE_PROVINCIA LIKE CONCAT('%', P_SEARCH_TERM, '%')
        OR CANT.NOMBRE_CANTON LIKE CONCAT('%', P_SEARCH_TERM, '%')
        OR DIST.NOMBRE_DISTRITO LIKE CONCAT('%', P_SEARCH_TERM, '%')
    ORDER BY U.USUARIO_NOMBRE ASC
    LIMIT P_LIMIT_ROWS OFFSET P_OFFSET_ROWS;
END //
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_BUSCAR_PROVEEDORES_ADMIN_SP
-- DESCRIPCIÓN: Procedimiento para buscar proveedores con paginación.
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_BUSCAR_PROVEEDORES_ADMIN_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_BUSCAR_PROVEEDORES_ADMIN_SP(
    IN P_SEARCH_TERM VARCHAR(100),
    IN P_LIMIT_ROWS INT,
    IN P_OFFSET_ROWS INT
)
BEGIN
    SELECT 
        P.ID_PROVEEDOR_PK,
        P.PROVEEDOR_NOMBRE,
        P.PROVEEDOR_CORREO,
        P.NOMBRE_REPRESENTANTE,
        P.PROVEEDOR_DESCRIPCION_PRODUCTOS,
        E.ESTADO_DESCRIPCION AS ESTADO,
        COALESCE(T.TELEFONO_CONTACTO, 'NO REGISTRADO') AS TELEFONO,
        COALESCE(D.DIRECCION_SENNAS, 'NO REGISTRADA') AS DIRECCION,
        COALESCE(PROV.NOMBRE_PROVINCIA, '') AS PROVINCIA,
        COALESCE(CANT.NOMBRE_CANTON, '') AS CANTON,
        COALESCE(DIST.NOMBRE_DISTRITO, '') AS DISTRITO
    FROM huellitas_proveedores_tb AS P
    INNER JOIN huellitas_estado_tb AS E 
        ON P.ID_ESTADO_FK = E.ID_ESTADO_PK
    LEFT JOIN huellitas_telefono_contacto_tb AS T 
        ON P.ID_TELEFONO_CONTACTO_FK = T.ID_TELEFONO_CONTACTO_PK
    LEFT JOIN huellitas_direccion_tb AS D 
        ON P.ID_DIRECCION_FK = D.ID_DIRECCION_PK
    LEFT JOIN huellitas_direccion_provincia_tb AS PROV 
        ON D.ID_DIRECCION_PROVINCIA_FK = PROV.ID_DIRECCION_PROVINCIA_PK
    LEFT JOIN huellitas_direccion_canton_tb AS CANT 
        ON D.ID_DIRECCION_CANTON_FK = CANT.ID_DIRECCION_CANTON_PK
    LEFT JOIN huellitas_direccion_distrito_tb AS DIST 
        ON D.ID_DIRECCION_DISTRITO_FK = DIST.ID_DIRECCION_DISTRITO_PK
    WHERE 
        P.PROVEEDOR_NOMBRE LIKE CONCAT('%', P_SEARCH_TERM, '%')
        OR P.PROVEEDOR_CORREO LIKE CONCAT('%', P_SEARCH_TERM, '%')
        OR P.NOMBRE_REPRESENTANTE LIKE CONCAT('%', P_SEARCH_TERM, '%')
        OR P.PROVEEDOR_DESCRIPCION_PRODUCTOS LIKE CONCAT('%', P_SEARCH_TERM, '%')
        OR E.ESTADO_DESCRIPCION LIKE CONCAT('%', P_SEARCH_TERM, '%')
        OR PROV.NOMBRE_PROVINCIA LIKE CONCAT('%', P_SEARCH_TERM, '%')
        OR CANT.NOMBRE_CANTON LIKE CONCAT('%', P_SEARCH_TERM, '%')
        OR DIST.NOMBRE_DISTRITO LIKE CONCAT('%', P_SEARCH_TERM, '%')
    ORDER BY P.PROVEEDOR_NOMBRE ASC
    LIMIT P_LIMIT_ROWS OFFSET P_OFFSET_ROWS;
END //
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_BUSCAR_ROLES_ADMIN_SP
-- DESCRIPCIÓN: Procedimiento para buscar roles con paginación.
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_BUSCAR_ROLES_ADMIN_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_BUSCAR_ROLES_ADMIN_SP(
    IN P_SEARCH_TERM VARCHAR(100),
    IN P_LIMIT_ROWS INT,
    IN P_OFFSET_ROWS INT
)
BEGIN
    SELECT 
        R.ID_ROL_USUARIO_PK,
        R.DESCRIPCION_ROL_USUARIO,
        E.ESTADO_DESCRIPCION AS ESTADO
    FROM huellitas_rol_usuario_tb AS R
    INNER JOIN huellitas_estado_tb AS E 
        ON R.ID_ESTADO_FK = E.ID_ESTADO_PK
    WHERE 
        R.DESCRIPCION_ROL_USUARIO LIKE CONCAT('%', P_SEARCH_TERM, '%')
        OR E.ESTADO_DESCRIPCION LIKE CONCAT('%', P_SEARCH_TERM, '%')
    ORDER BY R.DESCRIPCION_ROL_USUARIO ASC
    LIMIT P_LIMIT_ROWS OFFSET P_OFFSET_ROWS;
END //
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_LISTAR_COMENTARIOS_ACTIVOS_POR_PRODUCTO_SP
-- DESCRIPCIÓN: Procedimiento para listar los comentarios de un producto en especifico.
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_LISTAR_COMENTARIOS_ACTIVOS_POR_PRODUCTO_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_LISTAR_COMENTARIOS_ACTIVOS_POR_PRODUCTO_SP(
    IN P_ID_PRODUCTO INT
)
BEGIN
    SELECT 
        C.ID_COMENTARIO_PK,
        C.ID_PRODUCTO_FK,
        C.ID_USUARIO_FK,
        U.USUARIO_NOMBRE AS NOMBRE_USUARIO,
        C.COMENTARIO_TEXTO,
        C.CALIFICACION_TIPO,
        C.FECHA_CREACION
    FROM huellitas_productos_comentarios_tb AS C
    INNER JOIN huellitas_usuarios_tb AS U 
        ON C.ID_USUARIO_FK = U.ID_USUARIO_PK
    WHERE C.ID_PRODUCTO_FK = P_ID_PRODUCTO
      AND C.ID_ESTADO_FK = 1  -- SOLO COMENTARIOS ACTIVOS
    ORDER BY C.FECHA_CREACION DESC;
END //
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_AGREGAR_COMENTARIO_SP
-- DESCRIPCIÓN: Procedimiento para agregar comentarios a productos.
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_AGREGAR_COMENTARIO_SP;
DELIMITER $$
CREATE PROCEDURE HUELLITAS_AGREGAR_COMENTARIO_SP(
    IN p_id_producto INT,
    IN p_id_usuario INT,
    IN p_comentario VARCHAR(1000),
    IN p_calificacion ENUM('1','2','3','4','5')
)
BEGIN
    INSERT INTO huellitas_productos_comentarios_tb
    (ID_PRODUCTO_FK, ID_USUARIO_FK, ID_ESTADO_FK, COMENTARIO_TEXTO, CALIFICACION_TIPO)
    VALUES (p_id_producto, p_id_usuario, 1, p_comentario, p_calificacion);
END$$
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_EDITAR_COMENTARIO_SP
-- DESCRIPCIÓN: Procedimiento para editar comentario de un producto.
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_ACTUALIZAR_COMENTARIO_SP;
DELIMITER $$
CREATE PROCEDURE HUELLITAS_ACTUALIZAR_COMENTARIO_SP(
    IN p_id_comentario INT,
    IN p_id_usuario INT,
    IN p_comentario VARCHAR(1000),
    IN p_calificacion ENUM('1','2','3','4','5')
)
BEGIN
    UPDATE huellitas_productos_comentarios_tb
    SET COMENTARIO_TEXTO = p_comentario,
        CALIFICACION_TIPO = p_calificacion
    WHERE ID_COMENTARIO_PK = p_id_comentario AND ID_USUARIO_FK = p_id_usuario;
END$$
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_ELIMINAR_COMENTARIO_SP
-- DESCRIPCIÓN: Procedimiento para "eliminar/desactivar" comentario de un producto.
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_ELIMINAR_COMENTARIO_SP;
DELIMITER $$
CREATE PROCEDURE HUELLITAS_ELIMINAR_COMENTARIO_SP(
    IN p_id_comentario INT,
    IN p_id_usuario INT
)
BEGIN
    UPDATE huellitas_productos_comentarios_tb
    SET ID_ESTADO_FK = 2
    WHERE ID_COMENTARIO_PK = p_id_comentario AND ID_USUARIO_FK = p_id_usuario;
END$$
DELIMITER ;





-- ==========================================
-- NOMBRE: HUELLITAS_AGREGAR_TARJETA_SP
-- DESCRIPCIÓN: Procedimiento para agregar tarjeta
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_AGREGAR_TARJETA_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_AGREGAR_TARJETA_SP (
    IN  P_ID_USUARIO INT,
    IN  P_TIPO_TARJETA VARCHAR(10),       -- 'CREDITO' | 'DEBITO'
    IN  P_MARCA_TARJETA VARCHAR(20),      -- 'VISA','MASTERCARD','AMEX','DINERS','OTHER'
    IN  P_NOMBRE_TITULAR VARCHAR(255),
    IN  P_NUMERO_TARJETA VARCHAR(25),     -- PLANO, TRIGGER CIFRA
    IN  P_FECHA_VENC_YM CHAR(7),          -- 'YYYY-MM'
    IN  P_CVV VARCHAR(4),                 -- PLANO, TRIGGER CIFRA
    IN  P_ES_PREDETERMINADO TINYINT(1),
    IN  P_IP VARCHAR(45),
    OUT P_ID_TARJETA INT
)
MODIFIES SQL DATA
BEGIN
    DECLARE V_FECHA_VENC DATE;

    -- VALIDAR QUE EL USUARIO EXISTA
    IF (SELECT COUNT(*) FROM huellitas_usuarios_tb WHERE ID_USUARIO_PK = P_ID_USUARIO) = 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = '❌ ERROR: EL USUARIO NO EXISTE.';
    END IF;

    -- CONVERTIR 'YYYY-MM' EN EL ÚLTIMO DÍA DEL MES
    SET V_FECHA_VENC = LAST_DAY(STR_TO_DATE(CONCAT(P_FECHA_VENC_YM, '-01'), '%Y-%m-%d'));

    -- SI SERÁ LA TARJETA PREDETERMINADA, DESACTIVAR OTRAS DEL MISMO USUARIO
    IF P_ES_PREDETERMINADO = 1 THEN
        UPDATE huellitas_tarjetas_tb
        SET ES_PREDETERMINADO = 0
        WHERE ID_USUARIO_FK = P_ID_USUARIO;
    END IF;

    -- INSERTAR LA NUEVA TARJETA (EN TEXTO PLANO; TRIGGERS HARÁN LA ENCRIPTACIÓN)
    INSERT INTO huellitas_tarjetas_tb (
        ID_USUARIO_FK,
        TIPO_TARJETA,
        MARCA_TARJETA,
        NOMBRE_TITULAR,
        NUMERO_TARJETA_ENCRIPTADO,
        ULTIMOS_CUATRO_DIGITOS,
        FECHA_VENCIMIENTO,
        CVV_ENCRIPTADO,
        ES_PREDETERMINADO,
        ESTA_ACTIVO,
        IP_REGISTRO
    ) VALUES (
        P_ID_USUARIO,
        UPPER(P_TIPO_TARJETA),
        UPPER(P_MARCA_TARJETA),
        P_NOMBRE_TITULAR,
        P_NUMERO_TARJETA,
        RIGHT(P_NUMERO_TARJETA, 4),
        V_FECHA_VENC,
        P_CVV,
        P_ES_PREDETERMINADO,
        TRUE,
        P_IP
    );

    -- RETORNAR EL ID INSERTADO
    SET P_ID_TARJETA = LAST_INSERT_ID();
END//
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_AGREGAR_NOTIFICACION_SP
-- DESCRIPCIÓN: Inserta una notificación para un usuario específico.
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_AGREGAR_NOTIFICACION_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_AGREGAR_NOTIFICACION_SP(
    IN P_ID_USUARIO INT,
    IN P_TITULO VARCHAR(150),
    IN P_MENSAJE VARCHAR(1000),
    IN P_TIPO ENUM('SISTEMA','PEDIDO','CITA','PROMOCION','SEGURIDAD','OTRO'),
    IN P_PRIORIDAD ENUM('BAJA','MEDIA','ALTA')
)
BEGIN
    -- VALIDAR QUE EL USUARIO EXISTA
    IF (SELECT COUNT(*) FROM huellitas_usuarios_tb WHERE ID_USUARIO_PK = P_ID_USUARIO) = 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = '❌ ERROR: EL USUARIO NO EXISTE.';
    END IF;

    -- INSERTAR NUEVA NOTIFICACIÓN
    INSERT INTO huellitas_notificaciones_tb (
        ID_USUARIO_FK,
        ID_ESTADO_FK,
        TITULO_NOTIFICACION,
        MENSAJE_NOTIFICACION,
        TIPO_NOTIFICACION,
        PRIORIDAD
    ) VALUES (
        P_ID_USUARIO,
        1, -- ESTADO ACTIVO
        P_TITULO,
        P_MENSAJE,
        P_TIPO,
        P_PRIORIDAD
    );
END //
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_OBTENER_NOTIFICACIONES_SP
-- DESCRIPCIÓN: Procedimiento para obtener todas las notificaciones por usuario
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_OBTENER_NOTIFICACIONES_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_OBTENER_NOTIFICACIONES_SP (
    IN P_ID_USUARIO INT
)
BEGIN
    SELECT 
        ID_NOTIFICACION_PK,
        TITULO_NOTIFICACION,
        MENSAJE_NOTIFICACION,
        FECHA_CREACION,
        ES_LEIDA,
        URL_REDIRECCION
    FROM huellitas_notificaciones_tb
    WHERE ID_USUARIO_FK = P_ID_USUARIO
      AND ES_LEIDA = FALSE
    ORDER BY FECHA_CREACION DESC
    LIMIT 10;
END //
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_CONTAR_NOTIFICACIONES_NO_LEIDAS_SP
-- DESCRIPCIÓN: Procedimiento para las notificaciones NO leídas
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_CONTAR_NOTIFICACIONES_NO_LEIDAS_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_CONTAR_NOTIFICACIONES_NO_LEIDAS_SP (
    IN P_ID_USUARIO INT
)
BEGIN
    SELECT COUNT(*) AS total
    FROM huellitas_notificaciones_tb
    WHERE ID_USUARIO_FK = P_ID_USUARIO
    AND ES_LEIDA = FALSE;
END //
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_MARCAR_NOTIFICACION_LEIDA_SP
-- DESCRIPCIÓN: Procedimiento para marcar una notificación como leida.
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_MARCAR_NOTIFICACION_LEIDA_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_MARCAR_NOTIFICACION_LEIDA_SP (
    IN P_ID_NOTIFICACION INT
)
BEGIN
    UPDATE huellitas_notificaciones_tb
    SET ES_LEIDA = TRUE,
        FECHA_LECTURA = NOW(),
        ID_ESTADO_FK = 2
    WHERE ID_NOTIFICACION_PK = P_ID_NOTIFICACION;
END //
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_MARCAR_TODAS_LEIDAS_SP
-- DESCRIPCIÓN: Procedimiento para marcar TODAS las notificaiones como leídas
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_MARCAR_TODAS_LEIDAS_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_MARCAR_TODAS_LEIDAS_SP (
    IN P_ID_USUARIO INT
)
BEGIN
    UPDATE huellitas_notificaciones_tb
    SET ES_LEIDA = TRUE,
        FECHA_LECTURA = NOW(),
        ID_ESTADO_FK = 2
    WHERE ID_USUARIO_FK = P_ID_USUARIO
    AND ES_LEIDA = FALSE;
END //
DELIMITER ;


-- ==========================================
-- NOMBRE: HUELLITAS_AGREGAR_SERVICIO_SP
-- DESCRIPCIÓN: Procedimiento para agregar un nuevo servicio veterinario
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_AGREGAR_SERVICIO_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_AGREGAR_SERVICIO_SP (
    IN P_ID_ESTADO_FK INT,
    IN P_NOMBRE_SERVICIO VARCHAR(150),
    IN P_DESCRIPCION_SERVICIO VARCHAR(1000),
    IN P_IMAGEN_URL VARCHAR(500)
)
BEGIN
    -- VERIFICAR QUE EL ESTADO EXISTA
    IF (SELECT COUNT(*) FROM huellitas_estado_tb WHERE ID_ESTADO_PK = P_ID_ESTADO_FK) = 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = '❌ ERROR: EL ESTADO ESPECIFICADO NO EXISTE.';
    END IF;

    -- INSERTAR EL NUEVO SERVICIO
    INSERT INTO huellitas_servicios_tb (
        ID_ESTADO_FK,
        NOMBRE_SERVICIO,
        DESCRIPCION_SERVICIO,
        IMAGEN_URL
    )
    VALUES (
        P_ID_ESTADO_FK,
        P_NOMBRE_SERVICIO,
        P_DESCRIPCION_SERVICIO,
        P_IMAGEN_URL
    );

    -- CONFIRMAR CREACIÓN
    SELECT 
        '✅ SERVICIO AGREGADO CORRECTAMENTE' AS MENSAJE,
        LAST_INSERT_ID() AS ID_SERVICIO_CREADO;
END //
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_ACTUALIZAR_SERVICIO_SP
-- DESCRIPCIÓN: Procedimiento para actualizar la información de un servicio veterinario
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_ACTUALIZAR_SERVICIO_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_ACTUALIZAR_SERVICIO_SP (
    IN P_ID_SERVICIO_PK INT,
    IN P_ID_ESTADO_FK INT,
    IN P_NOMBRE_SERVICIO VARCHAR(150),
    IN P_DESCRIPCION_SERVICIO VARCHAR(1000),
    IN P_IMAGEN_URL VARCHAR(500)
)
BEGIN
    DECLARE V_EXISTE INT;

    -- VERIFICAR QUE EL SERVICIO EXISTA
    SELECT COUNT(*) INTO V_EXISTE
    FROM huellitas_servicios_tb
    WHERE ID_SERVICIO_PK = P_ID_SERVICIO_PK;

    IF V_EXISTE = 0 THEN
        SELECT '❌ ERROR: EL SERVICIO NO EXISTE' AS MENSAJE;
    ELSE
        -- VALIDAR QUE EL ESTADO EXISTA
        IF (SELECT COUNT(*) FROM huellitas_estado_tb WHERE ID_ESTADO_PK = P_ID_ESTADO_FK) = 0 THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = '❌ ERROR: EL ESTADO ESPECIFICADO NO EXISTE.';
        END IF;

        -- ACTUALIZAR EL SERVICIO
        UPDATE huellitas_servicios_tb
        SET 
            ID_ESTADO_FK = P_ID_ESTADO_FK,
            NOMBRE_SERVICIO = P_NOMBRE_SERVICIO,
            DESCRIPCION_SERVICIO = P_DESCRIPCION_SERVICIO,
            IMAGEN_URL = P_IMAGEN_URL,
            FECHA_ACTUALIZACION = NOW()
        WHERE ID_SERVICIO_PK = P_ID_SERVICIO_PK;

        SELECT '✅ SERVICIO ACTUALIZADO CORRECTAMENTE' AS MENSAJE;
    END IF;
END //
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_LISTAR_SERVICIOS_SP
-- DESCRIPCIÓN: Procedimiento para listar todos los servicios de la veterinaria
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_LISTAR_SERVICIOS_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_LISTAR_SERVICIOS_SP()
BEGIN
    SELECT 
        S.ID_SERVICIO_PK,
        S.NOMBRE_SERVICIO,
        S.DESCRIPCION_SERVICIO,
        S.IMAGEN_URL,
        S.FECHA_CREACION,
        S.FECHA_ACTUALIZACION,
        E.ESTADO_DESCRIPCION AS ESTADO
    FROM huellitas_servicios_tb AS S
    INNER JOIN huellitas_estado_tb AS E 
        ON S.ID_ESTADO_FK = E.ID_ESTADO_PK
    ORDER BY S.ID_SERVICIO_PK ASC;
END //
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_OBTENER_SERVICIO_POR_ID_SP
-- DESCRIPCIÓN: Procedimiento para obtener un servicio veterinario por su ID
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_OBTENER_SERVICIO_POR_ID_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_OBTENER_SERVICIO_POR_ID_SP (
    IN P_ID_SERVICIO_PK INT
)
BEGIN
    -- VERIFICAR SI EL SERVICIO EXISTE
    IF EXISTS (SELECT 1 FROM huellitas_servicios_tb WHERE ID_SERVICIO_PK = P_ID_SERVICIO_PK) THEN
        SELECT 
            S.ID_SERVICIO_PK,
            S.NOMBRE_SERVICIO,
            S.DESCRIPCION_SERVICIO,
            S.IMAGEN_URL,
            S.FECHA_CREACION,
            S.FECHA_ACTUALIZACION,
            S.ID_ESTADO_FK,
            E.ESTADO_DESCRIPCION AS ESTADO
        FROM huellitas_servicios_tb AS S
        INNER JOIN huellitas_estado_tb AS E 
            ON S.ID_ESTADO_FK = E.ID_ESTADO_PK
        WHERE S.ID_SERVICIO_PK = P_ID_SERVICIO_PK;
    ELSE
        SELECT '❌ ERROR: EL SERVICIO NO EXISTE' AS MENSAJE;
    END IF;
END //
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_LISTAR_SERVICIOS_ACTIVOS_SP
-- DESCRIPCIÓN: Procedimiento para listar todos los servicios activos (ID_ESTADO_FK = 1)
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_LISTAR_SERVICIOS_ACTIVOS_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_LISTAR_SERVICIOS_ACTIVOS_SP()
BEGIN
    SELECT 
        S.ID_SERVICIO_PK,
        S.NOMBRE_SERVICIO,
        S.DESCRIPCION_SERVICIO,
        S.IMAGEN_URL,
        S.FECHA_CREACION,
        E.ESTADO_DESCRIPCION AS ESTADO
    FROM 
        huellitas_servicios_tb AS S
    INNER JOIN 
        huellitas_estado_tb AS E ON S.ID_ESTADO_FK = E.ID_ESTADO_PK
    WHERE 
        S.ID_ESTADO_FK = 1 -- SOLO SERVICIOS ACTIVOS
    ORDER BY 
        S.FECHA_CREACION DESC;
END //
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_CREAR_TOKEN_SP
-- DESCRIPCIÓN: Procedimiento para crear tokens
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_CREAR_TOKEN_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_CREAR_TOKEN_SP(
    IN p_id_usuario INT,
    IN p_tipo ENUM('VERIFICACION','RECUPERACION','AUTENTICACION'),
    IN p_duracion_min INT,
    IN p_ip VARCHAR(45),
    IN p_dispositivo VARCHAR(200),
    OUT p_token VARCHAR(255)
)
BEGIN
    SET p_token = HEX(AES_ENCRYPT(UUID(), 'HUELLITAS_SECRET_KEY'));
    INSERT INTO huellitas_tokens_tb (
        ID_USUARIO_FK, TOKEN_VALOR, TIPO_TOKEN, FECHA_EXPIRA, IP_SOLICITUD, DISPOSITIVO
    )
    VALUES (
        p_id_usuario, p_token, p_tipo, DATE_ADD(NOW(), INTERVAL p_duracion_min MINUTE), p_ip, p_dispositivo
    );
END//
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_VALIDAR_TOKEN_SP
-- DESCRIPCIÓN: Procedimiento para validar tokens
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_VALIDAR_TOKEN_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_VALIDAR_TOKEN_SP(
    IN p_token VARCHAR(255),
    IN p_tipo ENUM('VERIFICACION','RECUPERACION','AUTENTICACION')
)
BEGIN
    SELECT ID_USUARIO_FK
    FROM huellitas_tokens_tb
    WHERE TOKEN_VALOR = p_token
      AND TIPO_TOKEN = p_tipo
      AND USADO = FALSE
      AND FECHA_EXPIRA > NOW();
END//
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_REESTABLECER_CONTRASENNA_SP
-- DESCRIPCIÓN: Permite cambiar la contraseña de un usuario usando token válido
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_REESTABLECER_CONTRASENNA_SP;
DELIMITER //
CREATE PROCEDURE HUELLITAS_REESTABLECER_CONTRASENNA_SP(
    IN p_token VARCHAR(255),
    IN p_nueva_contrasenna VARCHAR(255)
)
BEGIN
    DECLARE v_id_usuario INT;

    -- Validar token activo y obtener usuario
    SELECT ID_USUARIO_FK INTO v_id_usuario
    FROM huellitas_tokens_tb
    WHERE TOKEN_VALOR = p_token
      AND TIPO_TOKEN = 'RECUPERACION'
      AND USADO = FALSE
      AND FECHA_EXPIRA > NOW()
    LIMIT 1;

    IF v_id_usuario IS NULL THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = '❌ Token inválido o expirado.';
    ELSE
        -- Actualizar contraseña (el trigger se encarga de encriptarla)
        UPDATE huellitas_usuarios_tb
        SET USUARIO_CONTRASENNA = p_nueva_contrasenna
        WHERE ID_USUARIO_PK = v_id_usuario;

        -- Marcar token como usado
        UPDATE huellitas_tokens_tb
        SET USADO = TRUE
        WHERE TOKEN_VALOR = p_token;

        SELECT '✅ Contraseña restablecida correctamente' AS MENSAJE;
    END IF;
END//
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_ADMIN_AGREGAR_USUARIO_SP
-- DESCRIPCIÓN: Procedimiento para agregar nuevos usuarios por parte del admin
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_ADMIN_AGREGAR_USUARIO_SP;
DELIMITER $$
CREATE PROCEDURE HUELLITAS_ADMIN_AGREGAR_USUARIO_SP(
    IN p_nombre VARCHAR(100),
    IN p_email VARCHAR(100),
    IN p_password VARCHAR(255),
    IN p_id_estado INT,
    IN p_id_rol INT,
    IN p_identificacion INT,
    IN p_telefono VARCHAR(20)
)
BEGIN
    DECLARE v_id_telefono INT;

    -- VALIDAR EMAIL ÚNICO
    IF EXISTS (SELECT 1 FROM huellitas_usuarios_tb WHERE USUARIO_CORREO = p_email) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = '⚠️ El correo ya está registrado.';
    END IF;

    -- VALIDAR IDENTIFICACIÓN ÚNICA
    IF p_identificacion IS NOT NULL AND EXISTS (
        SELECT 1 FROM huellitas_usuarios_tb WHERE USUARIO_IDENTIFICACION = p_identificacion
    ) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = '⚠️ La identificación ya está registrada.';
    END IF;

    -- ✅ Insertar teléfono
    INSERT INTO huellitas_telefono_contacto_tb (ID_ESTADO_FK, TELEFONO_CONTACTO)
    VALUES (1, p_telefono);

    SET v_id_telefono = LAST_INSERT_ID();

    -- ✅ Insertar usuario con teléfono asignado
    INSERT INTO huellitas_usuarios_tb
    (
        USUARIO_NOMBRE,
        USUARIO_CORREO,
        USUARIO_CONTRASENNA,
        ID_ESTADO_FK,
        ID_ROL_USUARIO_FK,
        USUARIO_IDENTIFICACION,
        ID_TELEFONO_CONTACTO_FK
    )
    VALUES (
        p_nombre,
        p_email,
        p_password,
        p_id_estado,
        p_id_rol,
        p_identificacion,
        v_id_telefono
    );

END$$
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_ADMIN_ACTUALIZAR_USUARIO_SP
-- DESCRIPCIÓN: Procedimiento para actualizar usuarios por parte del admin
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_ADMIN_ACTUALIZAR_USUARIO_SP;
DELIMITER $$
CREATE PROCEDURE HUELLITAS_ADMIN_ACTUALIZAR_USUARIO_SP(
    IN p_id INT,
    IN p_nombre VARCHAR(100),
    IN p_email VARCHAR(100),
    IN p_estado INT,
    IN p_rol INT,
    IN p_identificacion INT,
    IN p_telefono VARCHAR(20),
    IN p_password VARCHAR(255),
    IN p_imagen VARCHAR(500)
)
BEGIN
    DECLARE v_id_telefono INT;
    DECLARE v_current_password VARCHAR(255);
    DECLARE v_current_image VARCHAR(500);

    -- Obtener ID del teléfono actual
    SELECT ID_TELEFONO_CONTACTO_FK INTO v_id_telefono
    FROM huellitas_usuarios_tb
    WHERE ID_USUARIO_PK = p_id;

    -- ✅ Actualizar teléfono
    UPDATE huellitas_telefono_contacto_tb
    SET TELEFONO_CONTACTO = p_telefono
    WHERE ID_TELEFONO_CONTACTO_PK = v_id_telefono;

    -- ✅ Mantener contraseña si no se envió una nueva
    SELECT USUARIO_CONTRASENNA INTO v_current_password
    FROM huellitas_usuarios_tb WHERE ID_USUARIO_PK = p_id;

    IF p_password IS NULL OR p_password = '' THEN
        SET p_password = v_current_password;
    END IF;

    -- ✅ Mantener imagen si no se mandó nueva
    SELECT USUARIO_IMAGEN_URL INTO v_current_image
    FROM huellitas_usuarios_tb WHERE ID_USUARIO_PK = p_id;

    IF p_imagen IS NULL OR p_imagen = '' THEN
        SET p_imagen = v_current_image;
    END IF;

    -- ✅ Actualizar usuario
    UPDATE huellitas_usuarios_tb
    SET
        USUARIO_NOMBRE = p_nombre,
        USUARIO_CORREO = p_email,
        ID_ESTADO_FK = p_estado,
        ID_ROL_USUARIO_FK = p_rol,
        USUARIO_IDENTIFICACION = p_identificacion,
        USUARIO_IMAGEN_URL = p_imagen,
        USUARIO_CONTRASENNA = p_password
    WHERE ID_USUARIO_PK = p_id;
END$$
DELIMITER ;


-- ==========================================
-- NOMBRE: HUELLITAS_OBTENER_USUARIO_POR_ID_ADMIN_SP
-- DESCRIPCIÓN: Procedimiento para obtener usuarios meditante id por parte del admin
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_ADMIN_OBTENER_USUARIO_POR_ID_SP;
DELIMITER $$
CREATE PROCEDURE HUELLITAS_ADMIN_OBTENER_USUARIO_POR_ID_SP(
    IN p_idUsuario INT
)
BEGIN
    SELECT 
        u.ID_USUARIO_PK,
        u.USUARIO_NOMBRE,
        u.USUARIO_CORREO,
        u.USUARIO_IDENTIFICACION,
        u.USUARIO_IMAGEN_URL,
        u.ID_ROL_USUARIO_FK,
        r.DESCRIPCION_ROL_USUARIO AS ROL,
        u.ID_ESTADO_FK,
        e.ESTADO_DESCRIPCION AS ESTADO,
        u.ID_DIRECCION_FK,
        u.ID_TELEFONO_CONTACTO_FK,
        t.TELEFONO_CONTACTO AS USUARIO_TELEFONO,
        d.ID_DIRECCION_PROVINCIA_FK,
        prov.NOMBRE_PROVINCIA,
        d.ID_DIRECCION_CANTON_FK,
        cant.NOMBRE_CANTON,
        d.ID_DIRECCION_DISTRITO_FK,
        dist.NOMBRE_DISTRITO
    FROM huellitas_usuarios_tb u
    INNER JOIN huellitas_rol_usuario_tb r ON u.ID_ROL_USUARIO_FK = r.ID_ROL_USUARIO_PK
    INNER JOIN huellitas_estado_tb e ON u.ID_ESTADO_FK = e.ID_ESTADO_PK
    LEFT JOIN huellitas_telefono_contacto_tb t ON u.ID_TELEFONO_CONTACTO_FK = t.ID_TELEFONO_CONTACTO_PK
    LEFT JOIN huellitas_direccion_tb d ON u.ID_DIRECCION_FK = d.ID_DIRECCION_PK
    LEFT JOIN huellitas_direccion_provincia_tb prov ON d.ID_DIRECCION_PROVINCIA_FK = prov.ID_DIRECCION_PROVINCIA_PK
    LEFT JOIN huellitas_direccion_canton_tb cant ON d.ID_DIRECCION_CANTON_FK = cant.ID_DIRECCION_CANTON_PK
    LEFT JOIN huellitas_direccion_distrito_tb dist ON d.ID_DIRECCION_DISTRITO_FK = dist.ID_DIRECCION_DISTRITO_PK
    WHERE u.ID_USUARIO_PK = p_idUsuario;
END$$
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_OBTENER_ROL_POR_ID_SP
-- DESCRIPCIÓN: Obtiene un rol según su ID
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_OBTENER_ROL_POR_ID_SP;
DELIMITER $$
CREATE PROCEDURE HUELLITAS_OBTENER_ROL_POR_ID_SP(
    IN p_id_rol INT
)
BEGIN
    SELECT *
    FROM huellitas_rol_usuario_tb
    WHERE ID_ROL_USUARIO_PK = p_id_rol;
END $$
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_AGREGAR_ROL_SP
-- DESCRIPCIÓN: Agrega un nuevo rol validando duplicados
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_AGREGAR_ROL_SP;
DELIMITER $$
CREATE PROCEDURE HUELLITAS_AGREGAR_ROL_SP(
    IN p_descripcion VARCHAR(100),
    IN p_estado INT
)
BEGIN
    -- Validar si existe nombre repetido
    IF EXISTS(SELECT 1 FROM huellitas_rol_usuario_tb 
              WHERE DESCRIPCION_ROL_USUARIO = p_descripcion) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = '⚠️ Ya existe un rol con esa descripción.';
    END IF;

    INSERT INTO huellitas_rol_usuario_tb
    (DESCRIPCION_ROL_USUARIO, ID_ESTADO_FK)
    VALUES (p_descripcion, p_estado);

END $$
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_ACTUALIZAR_ROL_SP
-- DESCRIPCIÓN: Actualiza un rol según ID
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_ACTUALIZAR_ROL_SP;
DELIMITER $$
CREATE PROCEDURE HUELLITAS_ACTUALIZAR_ROL_SP(
    IN p_id_rol INT,
    IN p_descripcion VARCHAR(100),
    IN p_estado INT
)
BEGIN
    -- Validar duplicado excepto mismo rol
    IF EXISTS (SELECT 1 FROM huellitas_rol_usuario_tb
               WHERE DESCRIPCION_ROL_USUARIO = p_descripcion
               AND ID_ROL_USUARIO_PK <> p_id_rol) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = '⚠️ La descripción del rol ya está en uso por otro rol.';
    END IF;

    UPDATE huellitas_rol_usuario_tb
    SET DESCRIPCION_ROL_USUARIO = p_descripcion,
        ID_ESTADO_FK = p_estado
    WHERE ID_ROL_USUARIO_PK = p_id_rol;

END $$
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_LISTAR_ROLES_ACTIVOS_SP
-- DESCRIPCIÓN: Lista únicamente los roles con estado activo
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_LISTAR_ROLES_ACTIVOS_SP;
DELIMITER $$
CREATE PROCEDURE HUELLITAS_LISTAR_ROLES_ACTIVOS_SP()
BEGIN
    SELECT 
        r.ID_ROL_USUARIO_PK,
        r.DESCRIPCION_ROL_USUARIO,
        r.ID_ESTADO_FK
    FROM 
        huellitas_rol_usuario_tb r
    INNER JOIN huellitas_estado_tb e 
        ON r.ID_ESTADO_FK = e.ID_ESTADO_PK
    WHERE 
        e.ESTADO_DESCRIPCION = 'Activo';
END $$
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_OBTENER_PROVEEDOR_POR_ID_SP
-- DESCRIPCIÓN: Procedimiento para obtener proveedor mediante ID
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_OBTENER_PROVEEDOR_POR_ID_SP;
DELIMITER $$
CREATE PROCEDURE HUELLITAS_OBTENER_PROVEEDOR_POR_ID_SP(
    IN p_id_proveedor INT
)
BEGIN
    SELECT 
        P.ID_PROVEEDOR_PK,
        P.PROVEEDOR_NOMBRE,
        P.NOMBRE_REPRESENTANTE,
        P.PROVEEDOR_CORREO,
        P.PROVEEDOR_DESCRIPCION_PRODUCTOS,
        P.ID_ESTADO_FK,
        E.ESTADO_DESCRIPCION AS ESTADO,
        
        -- Teléfono
        COALESCE(T.TELEFONO_CONTACTO, 'NO REGISTRADO') AS TELEFONO_CONTACTO,

        -- Dirección completa
        COALESCE(D.DIRECCION_SENNAS, 'SIN DIRECCIÓN') AS DIRECCION,
        COALESCE(PROV.NOMBRE_PROVINCIA, '') AS PROVINCIA,
        COALESCE(CANT.NOMBRE_CANTON, '') AS CANTON,
        COALESCE(DIST.NOMBRE_DISTRITO, '') AS DISTRITO
        
    FROM huellitas_proveedores_tb P
    INNER JOIN huellitas_estado_tb E 
        ON P.ID_ESTADO_FK = E.ID_ESTADO_PK
    LEFT JOIN huellitas_telefono_contacto_tb T 
        ON P.ID_TELEFONO_CONTACTO_FK = T.ID_TELEFONO_CONTACTO_PK
    LEFT JOIN huellitas_direccion_tb D 
        ON P.ID_DIRECCION_FK = D.ID_DIRECCION_PK
    LEFT JOIN huellitas_direccion_provincia_tb PROV 
        ON D.ID_DIRECCION_PROVINCIA_FK = PROV.ID_DIRECCION_PROVINCIA_PK
    LEFT JOIN huellitas_direccion_canton_tb CANT 
        ON D.ID_DIRECCION_CANTON_FK = CANT.ID_DIRECCION_CANTON_PK
    LEFT JOIN huellitas_direccion_distrito_tb DIST 
        ON D.ID_DIRECCION_DISTRITO_FK = DIST.ID_DIRECCION_DISTRITO_PK
    WHERE P.ID_PROVEEDOR_PK = p_id_proveedor;
END $$
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_OBTENER_PRODUCTO_POR_ID_SP
-- DESCRIPCIÓN: Procedimiento para obtener producto mediante ID
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_OBTENER_PRODUCTO_POR_ID_SP;
DELIMITER $$

CREATE PROCEDURE HUELLITAS_OBTENER_PRODUCTO_POR_ID_SP(
    IN p_id_producto INT
)
BEGIN
    SELECT 
        P.ID_PRODUCTO_PK,
        P.PRODUCTO_NOMBRE,
        P.PRODUCTO_DESCRIPCION,
        P.PRODUCTO_PRECIO_UNITARIO,
        P.PRODUCTO_STOCK,
        P.IMAGEN_URL,
        P.FECHA_CREACION,
        
        -- Estado
        P.ID_ESTADO_FK,
        E.ESTADO_DESCRIPCION AS ESTADO,

        -- Proveedor
        P.ID_PROVEEDOR_FK,
        PROV.PROVEEDOR_NOMBRE,
        PROV.PROVEEDOR_CORREO,
        
        -- Categoría
        P.ID_CATEGORIA_FK,
        CAT.DESCRIPCION_CATEGORIA,

        -- Marca
        P.ID_MARCA_FK,
        M.NOMBRE_MARCA,
        M.MARCA_IMAGEN_URL,

        -- Nuevo o no
        P.ID_NUEVO_FK,
        N.NUEVO_DESCRIPCION AS NUEVO

    FROM HUELLITAS_PRODUCTOS_TB P
    INNER JOIN huellitas_estado_tb E 
        ON P.ID_ESTADO_FK = E.ID_ESTADO_PK
    INNER JOIN huellitas_proveedores_tb PROV
        ON P.ID_PROVEEDOR_FK = PROV.ID_PROVEEDOR_PK
    INNER JOIN huellitas_productos_categoria_tb CAT
        ON P.ID_CATEGORIA_FK = CAT.ID_CATEGORIA_PK
    INNER JOIN huellitas_marcas_tb M
        ON P.ID_MARCA_FK = M.ID_MARCA_PK
    INNER JOIN huellitas_nuevo_tb N
        ON P.ID_NUEVO_FK = N.ID_NUEVO_PK
    WHERE P.ID_PRODUCTO_PK = p_id_producto;
END $$
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_LISTAR_PROVINCIAS_SP
-- DESCRIPCIÓN: Procedimiento listar todas las provincias
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_LISTAR_PROVINCIAS_SP;
DELIMITER $$
CREATE PROCEDURE HUELLITAS_LISTAR_PROVINCIAS_SP()
BEGIN
    SELECT 
        ID_DIRECCION_PROVINCIA_PK,
        NOMBRE_PROVINCIA
    FROM huellitas_direccion_provincia_tb
    ORDER BY NOMBRE_PROVINCIA ASC;
END$$
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_LISTAR_CANTONES_SP
-- DESCRIPCIÓN: Procedimiento listar todos los cantones
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_LISTAR_CANTONES_SP;
DELIMITER $$
CREATE PROCEDURE HUELLITAS_LISTAR_CANTONES_SP()
BEGIN
    SELECT 
        ID_DIRECCION_CANTON_PK,
        ID_PROVINCIA_FK,
        NOMBRE_CANTON
    FROM huellitas_direccion_canton_tb
    ORDER BY NOMBRE_CANTON ASC;
END$$
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_LISTAR_DISTRITOS_SP
-- DESCRIPCIÓN: Procedimiento listar todos los distritos
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_LISTAR_DISTRITOS_SP;
DELIMITER $$
CREATE PROCEDURE HUELLITAS_LISTAR_DISTRITOS_SP()
BEGIN
    SELECT 
        ID_DIRECCION_DISTRITO_PK,
        ID_CANTON_FK,
        NOMBRE_DISTRITO
    FROM huellitas_direccion_distrito_tb
    ORDER BY NOMBRE_DISTRITO ASC;
END$$
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_LISTAR_CANTONES_POR_PROVINCIA_SP
-- DESCRIPCIÓN: Procedimiento listar todos los "Cantones" por "Provincia"
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_LISTAR_CANTONES_POR_PROVINCIA_SP;
DELIMITER $$
CREATE PROCEDURE HUELLITAS_LISTAR_CANTONES_POR_PROVINCIA_SP(IN p_idProvincia INT)
BEGIN
    SELECT 
        ID_DIRECCION_CANTON_PK,
        NOMBRE_CANTON
    FROM huellitas_direccion_canton_tb
    WHERE ID_PROVINCIA_FK = p_idProvincia
    ORDER BY NOMBRE_CANTON ASC;
END$$
DELIMITER ;

-- ==========================================
-- NOMBRE: HUELLITAS_LISTAR_DISTRITOS_POR_CANTON_SP
-- DESCRIPCIÓN: Procedimiento listar todos los "Distritos" por "Canton"
-- ==========================================
DROP PROCEDURE IF EXISTS HUELLITAS_LISTAR_DISTRITOS_POR_CANTON_SP;
DELIMITER $$
CREATE PROCEDURE HUELLITAS_LISTAR_DISTRITOS_POR_CANTON_SP(IN p_idCanton INT)
BEGIN
    SELECT 
        ID_DIRECCION_DISTRITO_PK,
        NOMBRE_DISTRITO
    FROM huellitas_direccion_distrito_tb
    WHERE ID_CANTON_FK = p_idCanton
      AND ID_ESTADO_FK = 1
    ORDER BY NOMBRE_DISTRITO ASC;
END$$
DELIMITER ;






